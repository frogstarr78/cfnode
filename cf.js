module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "ApplicationFrameworkTags": parse_ApplicationFrameworkTags,
        "tag_cfapplication": parse_tag_cfapplication,
        "tag_cfassociate": parse_tag_cfassociate,
        "tag_cferror": parse_tag_cferror,
        "tag_cfimport": parse_tag_cfimport,
        "DatabaseManipulationTag": parse_DatabaseManipulationTag,
        "tag_cfdbinfo": parse_tag_cfdbinfo,
        "tag_cfqueryparam": parse_tag_cfqueryparam,
        "tag_cftransaction": parse_tag_cftransaction,
        "DataOutputTag": parse_DataOutputTag,
        "tag_cfflush": parse_tag_cfflush,
        "tag_cflog": parse_tag_cflog,
        "tag_cfoutput": parse_tag_cfoutput,
        "DebuggingTag": parse_DebuggingTag,
        "tag_cftimer": parse_tag_cftimer,
        "tag_cftrace": parse_tag_cftrace,
        "VariableManipulationTags": parse_VariableManipulationTags,
        "tag_cfdump": parse_tag_cfdump,
        "tag_cfcookie": parse_tag_cfcookie,
        "tag_cfparam": parse_tag_cfparam,
        "tag_cfsetting": parse_tag_cfsetting,
        "tag_cfsavecontent": parse_tag_cfsavecontent,
        "attr_name_required": parse_attr_name_required,
        "attr_cfapplication_optional": parse_attr_cfapplication_optional,
        "value_cfapplication_login_storage": parse_value_cfapplication_login_storage,
        "value_cfapplication_script_protect": parse_value_cfapplication_script_protect,
        "value_cfapplication_client_storage": parse_value_cfapplication_client_storage,
        "attr_cfassoc_required": parse_attr_cfassoc_required,
        "attr_cfassoc_optional": parse_attr_cfassoc_optional,
        "attr_cferr_required_type": parse_attr_cferr_required_type,
        "attr_cferr_required_template": parse_attr_cferr_required_template,
        "attr_cferr_optional": parse_attr_cferr_optional,
        "attr_cfimport_required": parse_attr_cfimport_required,
        "attr_cfimport_required_taglib": parse_attr_cfimport_required_taglib,
        "attr_cfimport_required_prefix": parse_attr_cfimport_required_prefix,
        "attr_cfcookie_optional": parse_attr_cfcookie_optional,
        "attr_cfdump_required": parse_attr_cfdump_required,
        "attr_cfdump_optional": parse_attr_cfdump_optional,
        "attr_cfparam_optional": parse_attr_cfparam_optional,
        "attr_cfsetting_optional": parse_attr_cfsetting_optional,
        "attr_cfsavecontent_required": parse_attr_cfsavecontent_required,
        "attr_cflog_required": parse_attr_cflog_required,
        "attr_cflog_optional": parse_attr_cflog_optional,
        "value_cflog_log": parse_value_cflog_log,
        "value_cflog_type": parse_value_cflog_type,
        "attr_cfflush_optional": parse_attr_cfflush_optional,
        "attr_cfoutput_optional": parse_attr_cfoutput_optional,
        "attr_cftimer_optional": parse_attr_cftimer_optional,
        "value_cftimer_type": parse_value_cftimer_type,
        "attr_cftrace_optional": parse_attr_cftrace_optional,
        "value_cftrace_type": parse_value_cftrace_type,
        "attr_cfdbinfo_required_type": parse_attr_cfdbinfo_required_type,
        "value_cfdbinfo_type": parse_value_cfdbinfo_type,
        "attr_cfdbinfo_optional": parse_attr_cfdbinfo_optional,
        "attr_cftransaction_optional": parse_attr_cftransaction_optional,
        "value_cftransaction_action": parse_value_cftransaction_action,
        "value_cftransaction_isolation": parse_value_cftransaction_isolation,
        "attr_cfqueryparam_required": parse_attr_cfqueryparam_required,
        "attr_cfqueryparam_optional": parse_attr_cfqueryparam_optional,
        "value_cfqueryparam_type": parse_value_cfqueryparam_type,
        "value_regex": parse_value_regex,
        "value_cfparam_type": parse_value_cfparam_type,
        "value_cfcookie_expires": parse_value_cfcookie_expires,
        "value_cfdump_output": parse_value_cfdump_output,
        "value_cfdump_format": parse_value_cfdump_format,
        "value_cferr_type": parse_value_cferr_type,
        "value_cferr_exception": parse_value_cferr_exception,
        "str_abort": parse_str_abort,
        "str_action": parse_str_action,
        "str_all": parse_str_all,
        "str_any": parse_str_any,
        "str_application": parse_str_application,
        "str_applicationtimeout": parse_str_applicationtimeout,
        "str_array": parse_str_array,
        "str_basetag": parse_str_basetag,
        "str_binary": parse_str_binary,
        "str_boolean": parse_str_boolean,
        "str_category": parse_str_category,
        "str_cfapplication": parse_str_cfapplication,
        "str_cfassociate": parse_str_cfassociate,
        "str_cfcookie": parse_str_cfcookie,
        "str_cfdbinfo": parse_str_cfdbinfo,
        "str_cfdump": parse_str_cfdump,
        "str_cferror": parse_str_cferror,
        "str_cfflush": parse_str_cfflush,
        "str_cflog": parse_str_cflog,
        "str_cfparam": parse_str_cfparam,
        "str_cfqueryparam": parse_str_cfqueryparam,
        "str_cftimer": parse_str_cftimer,
        "str_cftrace": parse_str_cftrace,
        "str_cftransaction": parse_str_cftransaction,
        "str_cfsql_type": parse_str_cfsql_type,
        "str_clientmanagement": parse_str_clientmanagement,
        "str_clientstorage": parse_str_clientstorage,
        "str_cookie": parse_str_cookie,
        "str_country_code": parse_str_country_code,
        "str_creditcard": parse_str_creditcard,
        "str_datasource": parse_str_datasource,
        "str_datacollection": parse_str_datacollection,
        "str_date": parse_str_date,
        "str_default": parse_str_default,
        "str_dbname": parse_str_dbname,
        "str_domain": parse_str_domain,
        "str_email": parse_str_email,
        "str_expand": parse_str_expand,
        "str_expires": parse_str_expires,
        "str_exception": parse_str_exception,
        "str_file": parse_str_file,
        "str_float": parse_str_float,
        "str_format": parse_str_format,
        "str_googlemapkey": parse_str_googlemapkey,
        "str_guid": parse_str_guid,
        "str_hide": parse_str_hide,
        "str_html": parse_str_html,
        "str_httponly": parse_str_httponly,
        "str_inline": parse_str_inline,
        "str_integer": parse_str_integer,
        "str_interval": parse_str_interval,
        "str_ip": parse_str_ip,
        "str_isolation": parse_str_isolation,
        "str_json": parse_str_json,
        "str_keys": parse_str_keys,
        "str_label": parse_str_label,
        "str_list": parse_str_list,
        "str_log": parse_str_log,
        "str_loginstorage": parse_str_loginstorage,
        "str_mail_to": parse_str_mail_to,
        "str_maxlength": parse_str_maxlength,
        "str_metainfo": parse_str_metainfo,
        "str_min": parse_str_min,
        "str_max": parse_str_max,
        "str_name": parse_str_name,
        "str_nested": parse_str_nested,
        "str_none": parse_str_none,
        "str_null": parse_str_null,
        "str_numeric": parse_str_numeric,
        "str_output": parse_str_output,
        "str_password": parse_str_password,
        "str_pattern": parse_str_pattern,
        "str_path": parse_str_path,
        "str_query": parse_str_query,
        "str_range": parse_str_range,
        "str_regex": parse_str_regex,
        "str_registry": parse_str_registry,
        "str_regular_expression": parse_str_regular_expression,
        "str_savepoint": parse_str_savepoint,
        "str_secure": parse_str_secure,
        "str_scale": parse_str_scale,
        "str_scriptprotect": parse_str_scriptprotect,
        "str_securejson": parse_str_securejson,
        "str_securejsonprefix": parse_str_securejsonprefix,
        "str_serversideformvalidation": parse_str_serversideformvalidation,
        "str_separator": parse_str_separator,
        "str_session": parse_str_session,
        "str_sessionmanagement": parse_str_sessionmanagement,
        "str_sessiontimeout": parse_str_sessiontimeout,
        "str_setclientcookies": parse_str_setclientcookies,
        "str_setdomaincookies": parse_str_setdomaincookies,
        "str_show": parse_str_show,
        "str_showudfs": parse_str_showudfs,
        "str_social_security_number": parse_str_social_security_number,
        "str_ssn": parse_str_ssn,
        "str_string": parse_str_string,
        "str_struct": parse_str_struct,
        "str_table": parse_str_table,
        "str_telephone": parse_str_telephone,
        "str_template": parse_str_template,
        "str_text": parse_str_text,
        "str_time": parse_str_time,
        "str_top": parse_str_top,
        "str_type": parse_str_type,
        "str_url": parse_str_url,
        "str_username": parse_str_username,
        "str_uuid": parse_str_uuid,
        "str_value": parse_str_value,
        "str_var": parse_str_var,
        "str_variable": parse_str_variable,
        "str_variable_name": parse_str_variable_name,
        "str_xml": parse_str_xml,
        "str_zip": parse_str_zip,
        "str_zipcode": parse_str_zipcode,
        "value_file_path": parse_value_file_path,
        "value_dir": parse_value_dir,
        "value_email_address": parse_value_email_address,
        "email": parse_email,
        "date_time": parse_date_time,
        "date": parse_date,
        "time": parse_time,
        "value_boolean": parse_value_boolean,
        "boolean": parse_boolean,
        "value_cfval": parse_value_cfval,
        "cfval": parse_cfval,
        "value_list": parse_value_list,
        "value_domain": parse_value_domain,
        "domain": parse_domain,
        "dom_part": parse_dom_part,
        "value_any_non_whitespace": parse_value_any_non_whitespace,
        "value_any": parse_value_any,
        "str_any_non_quote": parse_str_any_non_quote,
        "value_empty_quote": parse_value_empty_quote,
        "value_integer": parse_value_integer,
        "ops": parse_ops,
        "func_create_time_span": parse_func_create_time_span,
        "create_time_span_func": parse_create_time_span_func,
        "chars": parse_chars,
        "ucchars": parse_ucchars,
        "lcchars": parse_lcchars,
        "at": parse_at,
        "pound": parse_pound,
        "ws": parse_ws,
        "gt": parse_gt,
        "lt": parse_lt,
        "wack": parse_wack,
        "eql": parse_eql,
        "period": parse_period,
        "comma": parse_comma,
        "quote_char": parse_quote_char,
        "integer": parse_integer,
        "space": parse_space,
        "anychar": parse_anychar,
        "attrib_eql": parse_attrib_eql,
        "a": parse_a,
        "b": parse_b,
        "c": parse_c,
        "d": parse_d,
        "e": parse_e,
        "f": parse_f,
        "g": parse_g,
        "h": parse_h,
        "i": parse_i,
        "j": parse_j,
        "k": parse_k,
        "l": parse_l,
        "m": parse_m,
        "n": parse_n,
        "o": parse_o,
        "p": parse_p,
        "q": parse_q,
        "r": parse_r,
        "s": parse_s,
        "t": parse_t,
        "u": parse_u,
        "v": parse_v,
        "w": parse_w,
        "x": parse_x,
        "y": parse_y,
        "z": parse_z
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        
        result0 = parse_ApplicationFrameworkTags();
        if (result0 === null) {
          result0 = parse_DatabaseManipulationTag();
          if (result0 === null) {
            result0 = parse_DataOutputTag();
            if (result0 === null) {
              result0 = parse_DebuggingTag();
              if (result0 === null) {
                result0 = parse_VariableManipulationTags();
                if (result0 === null) {
                  result0 = parse_anychar();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_ApplicationFrameworkTags() {
        var result0;
        
        result0 = parse_tag_cfapplication();
        if (result0 === null) {
          result0 = parse_tag_cfassociate();
          if (result0 === null) {
            result0 = parse_tag_cferror();
            if (result0 === null) {
              result0 = parse_tag_cfimport();
            }
          }
        }
        return result0;
      }
      
      function parse_tag_cfapplication() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfapplication();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cfapplication_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfapplication_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_name_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cfapplication_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cfapplication_optional();
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_ws();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_ws();
              }
              if (result3 !== null) {
                result4 = parse_lt();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_anychar();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_anychar();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfassociate() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfassociate();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_attr_cfassoc_required();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_attr_cfassoc_optional();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_attr_cfassoc_optional();
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              result2 = [];
              result3 = parse_attr_cfassoc_optional();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_attr_cfassoc_optional();
              }
              if (result2 !== null) {
                result3 = parse_attr_cfassoc_required();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cferror() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cferror();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cferr_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cferr_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_cferr_required_template();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cferr_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cferr_optional();
                }
                if (result4 !== null) {
                  result5 = parse_attr_cferr_required_type();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_attr_cferr_optional();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_attr_cferr_optional();
                    }
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              result2 = [];
              result3 = parse_attr_cferr_optional();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_attr_cferr_optional();
              }
              if (result2 !== null) {
                result3 = parse_attr_cferr_required_type();
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_attr_cferr_optional();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_attr_cferr_optional();
                  }
                  if (result4 !== null) {
                    result5 = parse_attr_cferr_required_template();
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_attr_cferr_optional();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_attr_cferr_optional();
                      }
                      if (result6 !== null) {
                        result2 = [result2, result3, result4, result5, result6];
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfimport() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "cfimport") {
            result1 = "cfimport";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"cfimport\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_attr_cfimport_required();
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr, '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DatabaseManipulationTag() {
        var result0;
        
        result0 = parse_tag_cfdbinfo();
        if (result0 === null) {
          result0 = parse_tag_cfqueryparam();
          if (result0 === null) {
            result0 = parse_tag_cftransaction();
          }
        }
        return result0;
      }
      
      function parse_tag_cfdbinfo() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfdbinfo();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cfdbinfo_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfdbinfo_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_name_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cfdbinfo_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cfdbinfo_optional();
                }
                if (result4 !== null) {
                  result5 = parse_attr_cfdbinfo_required_type();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_attr_cfdbinfo_optional();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_attr_cfdbinfo_optional();
                    }
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              result2 = [];
              result3 = parse_attr_cfdbinfo_optional();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_attr_cfdbinfo_optional();
              }
              if (result2 !== null) {
                result3 = parse_attr_cfdbinfo_required_type();
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_attr_cfdbinfo_optional();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_attr_cfdbinfo_optional();
                  }
                  if (result4 !== null) {
                    result5 = parse_attr_name_required();
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_attr_cfdbinfo_optional();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_attr_cfdbinfo_optional();
                      }
                      if (result6 !== null) {
                        result2 = [result2, result3, result4, result5, result6];
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		var me = new cftag(t, attr.flatten(), '');
        		types_requiring_table_value = ['columns', 'foreignkeys', 'index'];
        		if ( ( me.attributes.type && types_requiring_table_value.indexOf(me.attributes.type) > -1 ) && ( ! me.attributes.table || me.attributes.table === "" ) ) {
        			throw new Error(util.format("Missing table value, required with type attribute specified as one of %a.", types_requiring_table_value));		
        		}
        		return me;
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfqueryparam() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfqueryparam();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cfqueryparam_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfqueryparam_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_cfqueryparam_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cfqueryparam_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cfqueryparam_optional();
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cftransaction() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cftransaction();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_attr_cftransaction_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cftransaction_optional();
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                pos4 = pos;
                result5 = parse_gt();
                if (result5 !== null) {
                  result6 = parse_wack();
                  if (result6 !== null) {
                    result7 = parse_str_cftransaction();
                    if (result7 !== null) {
                      result8 = parse_lt();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                } else {
                  result5 = null;
                  pos = pos4;
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_anychar();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  pos4 = pos;
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      result7 = parse_str_cftransaction();
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  if (result5 !== null) {
                    result6 = parse_anychar();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      result7 = parse_str_cftransaction();
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr, content) {
        		return new cftag(t, attr, plib.flatten(content));
        	})(pos0, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DataOutputTag() {
        var result0;
        
        result0 = parse_tag_cfflush();
        if (result0 === null) {
          result0 = parse_tag_cflog();
          if (result0 === null) {
            result0 = parse_tag_cfoutput();
          }
        }
        return result0;
      }
      
      function parse_tag_cfflush() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfflush();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_attr_cfflush_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfflush_optional();
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t,  attr, '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cflog() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cflog();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cflog_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cflog_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_cflog_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cflog_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cflog_optional();
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfoutput() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          if (input.substr(pos, 8) === "cfoutput") {
            result1 = "cfoutput";
            pos += 8;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"cfoutput\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_attr_cfoutput_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfoutput_optional();
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                pos4 = pos;
                result5 = parse_gt();
                if (result5 !== null) {
                  result6 = parse_wack();
                  if (result6 !== null) {
                    if (input.substr(pos, 8) === "cfoutput") {
                      result7 = "cfoutput";
                      pos += 8;
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"cfoutput\"");
                      }
                    }
                    if (result7 !== null) {
                      result8 = parse_lt();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                } else {
                  result5 = null;
                  pos = pos4;
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_anychar();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  pos4 = pos;
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      if (input.substr(pos, 8) === "cfoutput") {
                        result7 = "cfoutput";
                        pos += 8;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"cfoutput\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  if (result5 !== null) {
                    result6 = parse_anychar();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      if (input.substr(pos, 8) === "cfoutput") {
                        result7 = "cfoutput";
                        pos += 8;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"cfoutput\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr, content) {
        		return new cftag(t, attr, plib.flatten(content));
        	})(pos0, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DebuggingTag() {
        var result0;
        
        result0 = parse_tag_cfdump();
        if (result0 === null) {
          result0 = parse_tag_cftimer();
          if (result0 === null) {
            result0 = parse_tag_cftrace();
          }
        }
        return result0;
      }
      
      function parse_tag_cftimer() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cftimer();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_attr_cftimer_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cftimer_optional();
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                pos4 = pos;
                result5 = parse_gt();
                if (result5 !== null) {
                  result6 = parse_wack();
                  if (result6 !== null) {
                    result7 = parse_str_cftimer();
                    if (result7 !== null) {
                      result8 = parse_lt();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                } else {
                  result5 = null;
                  pos = pos4;
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_anychar();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  pos4 = pos;
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      result7 = parse_str_cftimer();
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  if (result5 !== null) {
                    result6 = parse_anychar();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      result7 = parse_str_cftimer();
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr, content) {
        		return new cftag(t, attr, plib.flatten(content));
        	})(pos0, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cftrace() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cftrace();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_attr_cftrace_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cftrace_optional();
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                pos4 = pos;
                result5 = parse_gt();
                if (result5 !== null) {
                  result6 = parse_wack();
                  if (result6 !== null) {
                    result7 = parse_str_cftrace();
                    if (result7 !== null) {
                      result8 = parse_lt();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                } else {
                  result5 = null;
                  pos = pos4;
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_anychar();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  pos4 = pos;
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      result7 = parse_str_cftrace();
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  if (result5 !== null) {
                    result6 = parse_anychar();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      result7 = parse_str_cftrace();
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr, content) {
        		return new cftag(t, attr, plib.flatten(content));
        	})(pos0, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_VariableManipulationTags() {
        var result0;
        
        result0 = parse_tag_cfdump();
        if (result0 === null) {
          result0 = parse_tag_cfcookie();
          if (result0 === null) {
            result0 = parse_tag_cfparam();
            if (result0 === null) {
              result0 = parse_tag_cfsavecontent();
              if (result0 === null) {
                result0 = parse_tag_cfsetting();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_tag_cfdump() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfdump();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cfdump_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfdump_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_cfdump_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cfdump_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cfdump_optional();
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfcookie() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfcookie();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cfcookie_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfcookie_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_name_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cfcookie_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cfcookie_optional();
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		var me = new cftag(t, attr.flatten(), '');
        		if ( ( me.attributes.path && me.attributes.path !== "" ) && ( ! me.attributes.domain || me.attributes.domain === "" ) ) {
        			throw new Error("Missing domain value, required with path attribute.");		
        		}
        		return me;
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfparam() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          result1 = parse_str_cfparam();
          if (result1 !== null) {
            pos2 = pos;
            result2 = [];
            result3 = parse_attr_cfparam_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfparam_optional();
            }
            if (result2 !== null) {
              result3 = parse_attr_name_required();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_attr_cfparam_optional();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_attr_cfparam_optional();
                }
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr.flatten(), '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfsetting() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "cfsetting") {
            result1 = "cfsetting";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"cfsetting\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_attr_cfsetting_optional();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_attr_cfsetting_optional();
            }
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr) {
        		return new cftag(t, attr, '');
        	})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tag_cfsavecontent() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_gt();
        if (result0 !== null) {
          if (input.substr(pos, 13) === "cfsavecontent") {
            result1 = "cfsavecontent";
            pos += 13;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"cfsavecontent\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_attr_cfsavecontent_required();
            if (result2 !== null) {
              result3 = parse_lt();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                pos3 = pos;
                reportFailures++;
                pos4 = pos;
                result5 = parse_gt();
                if (result5 !== null) {
                  result6 = parse_wack();
                  if (result6 !== null) {
                    if (input.substr(pos, 13) === "cfsavecontent") {
                      result7 = "cfsavecontent";
                      pos += 13;
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"cfsavecontent\"");
                      }
                    }
                    if (result7 !== null) {
                      result8 = parse_lt();
                      if (result8 !== null) {
                        result5 = [result5, result6, result7, result8];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                } else {
                  result5 = null;
                  pos = pos4;
                }
                reportFailures--;
                if (result5 === null) {
                  result5 = "";
                } else {
                  result5 = null;
                  pos = pos3;
                }
                if (result5 !== null) {
                  result6 = parse_anychar();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  pos3 = pos;
                  reportFailures++;
                  pos4 = pos;
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      if (input.substr(pos, 13) === "cfsavecontent") {
                        result7 = "cfsavecontent";
                        pos += 13;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"cfsavecontent\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                  if (result5 !== null) {
                    result6 = parse_anychar();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result5 = parse_gt();
                  if (result5 !== null) {
                    result6 = parse_wack();
                    if (result6 !== null) {
                      if (input.substr(pos, 13) === "cfsavecontent") {
                        result7 = "cfsavecontent";
                        pos += 13;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"cfsavecontent\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_lt();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t, attr, content) {
        		return new cftag(t, [attr], plib.flatten(content));
        	})(pos0, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_name_required() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_name();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any_non_whitespace();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfapplication_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_datasource();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n,                             value: v                  }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_applicationtimeout();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_func_create_time_span();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: 'timeout',                     value: plib.mkDate(v)     }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_clientmanagement();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_boolean();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: 'client_variables',            value: v                  }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_clientstorage();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_cfapplication_client_storage();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: 'client_storage',              value: v                  }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_setclientcookies();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_boolean();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: 'client_cookies',              value: v                  }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                      result0.push(result1);
                      result1 = parse_ws();
                    }
                  } else {
                    result0 = null;
                  }
                  if (result0 !== null) {
                    result1 = parse_str_setdomaincookies();
                    if (result1 !== null) {
                      result2 = parse_eql();
                      if (result2 !== null) {
                        result3 = parse_value_boolean();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, v) { return { name: 'domain_cookies',              value: v                  }; })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    result1 = parse_ws();
                    if (result1 !== null) {
                      result0 = [];
                      while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_ws();
                      }
                    } else {
                      result0 = null;
                    }
                    if (result0 !== null) {
                      result1 = parse_str_loginstorage();
                      if (result1 !== null) {
                        result2 = parse_eql();
                        if (result2 !== null) {
                          result3 = parse_value_cfapplication_login_storage();
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, n, v) { return { name: 'login_storage',               value: v                  }; })(pos0, result0[1], result0[3]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      result1 = parse_ws();
                      if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                          result0.push(result1);
                          result1 = parse_ws();
                        }
                      } else {
                        result0 = null;
                      }
                      if (result0 !== null) {
                        result1 = parse_str_googlemapkey();
                        if (result1 !== null) {
                          result2 = parse_eql();
                          if (result2 !== null) {
                            result3 = parse_value_any();
                            if (result3 !== null) {
                              result0 = [result0, result1, result2, result3];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, n, v) { return { name: 'google_map_key',              value: v                  }; })(pos0, result0[1], result0[3]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result1 = parse_ws();
                        if (result1 !== null) {
                          result0 = [];
                          while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_ws();
                          }
                        } else {
                          result0 = null;
                        }
                        if (result0 !== null) {
                          result1 = parse_str_scriptprotect();
                          if (result1 !== null) {
                            result2 = parse_eql();
                            if (result2 !== null) {
                              result3 = parse_value_cfapplication_script_protect();
                              if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, n, v) { return { name: 'script_protection',           value: v                  }; })(pos0, result0[1], result0[3]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          result1 = parse_ws();
                          if (result1 !== null) {
                            result0 = [];
                            while (result1 !== null) {
                              result0.push(result1);
                              result1 = parse_ws();
                            }
                          } else {
                            result0 = null;
                          }
                          if (result0 !== null) {
                            result1 = parse_str_serversideformvalidation();
                            if (result1 !== null) {
                              result2 = parse_eql();
                              if (result2 !== null) {
                                result3 = parse_value_boolean();
                                if (result3 !== null) {
                                  result0 = [result0, result1, result2, result3];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, n, v) { return { name: 'server_side_form_validation', value: v                  }; })(pos0, result0[1], result0[3]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result1 = parse_ws();
                            if (result1 !== null) {
                              result0 = [];
                              while (result1 !== null) {
                                result0.push(result1);
                                result1 = parse_ws();
                              }
                            } else {
                              result0 = null;
                            }
                            if (result0 !== null) {
                              result1 = parse_str_sessionmanagement();
                              if (result1 !== null) {
                                result2 = parse_eql();
                                if (result2 !== null) {
                                  result3 = parse_value_boolean();
                                  if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, n, v) { return { name: 'session_management',          value: v                  }; })(pos0, result0[1], result0[3]);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              pos1 = pos;
                              result1 = parse_ws();
                              if (result1 !== null) {
                                result0 = [];
                                while (result1 !== null) {
                                  result0.push(result1);
                                  result1 = parse_ws();
                                }
                              } else {
                                result0 = null;
                              }
                              if (result0 !== null) {
                                result1 = parse_str_sessiontimeout();
                                if (result1 !== null) {
                                  result2 = parse_eql();
                                  if (result2 !== null) {
                                    result3 = parse_func_create_time_span();
                                    if (result3 !== null) {
                                      result0 = [result0, result1, result2, result3];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, n, v) { return { name: 'session_timeout',             value: plib.mkDate(v)     }; })(pos0, result0[1], result0[3]);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                              if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                result1 = parse_ws();
                                if (result1 !== null) {
                                  result0 = [];
                                  while (result1 !== null) {
                                    result0.push(result1);
                                    result1 = parse_ws();
                                  }
                                } else {
                                  result0 = null;
                                }
                                if (result0 !== null) {
                                  result1 = parse_str_securejson();
                                  if (result1 !== null) {
                                    result2 = parse_eql();
                                    if (result2 !== null) {
                                      result3 = parse_value_boolean();
                                      if (result3 !== null) {
                                        result0 = [result0, result1, result2, result3];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, n, v) { return { name: 'secure_json',                 value: v                  }; })(pos0, result0[1], result0[3]);
                                }
                                if (result0 === null) {
                                  pos = pos0;
                                }
                                if (result0 === null) {
                                  pos0 = pos;
                                  pos1 = pos;
                                  result1 = parse_ws();
                                  if (result1 !== null) {
                                    result0 = [];
                                    while (result1 !== null) {
                                      result0.push(result1);
                                      result1 = parse_ws();
                                    }
                                  } else {
                                    result0 = null;
                                  }
                                  if (result0 !== null) {
                                    result1 = parse_str_securejsonprefix();
                                    if (result1 !== null) {
                                      result2 = parse_eql();
                                      if (result2 !== null) {
                                        result3 = parse_value_any();
                                        if (result3 !== null) {
                                          result0 = [result0, result1, result2, result3];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, n, v) { return { name: 'secure_json_prefix',          value: v == "" ? "//" : v }; })(pos0, result0[1], result0[3]);
                                  }
                                  if (result0 === null) {
                                    pos = pos0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfapplication_login_storage() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_str_cookie();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            result1 = parse_str_session();
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_value_cfapplication_script_protect() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_str_none();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            result1 = parse_str_all();
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              result1 = parse_str_list();
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfapplication_client_storage() {
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_value_any();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            result1 = parse_str_registry();
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              result1 = parse_str_cookie();
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) {  return  v.toLowerCase();  })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfassoc_required() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_basetag();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any_non_whitespace();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: 'base_tag', value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfassoc_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_datacollection();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any_non_whitespace();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: 'data_collection', value: v == "" ? "AssocAttribs" : v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cferr_required_type() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_type();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cferr_type();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cferr_required_template() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_template();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_file_path();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cferr_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_mail_to();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_email_address();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name:'mail_to',  value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_exception();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_cferr_exception();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n,         value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attr_cfimport_required() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_attr_cfimport_required_taglib();
        if (result0 !== null) {
          result1 = parse_attr_cfimport_required_prefix();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_attr_cfimport_required_prefix();
          if (result0 !== null) {
            result1 = parse_attr_cfimport_required_taglib();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attr_cfimport_required_taglib() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.substr(pos, 6) === "taglib") {
            result1 = "taglib";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"taglib\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_file_path();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfimport_required_prefix() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.substr(pos, 6) === "prefix") {
            result1 = "prefix";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"prefix\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any_non_whitespace();
              if (result3 === null) {
                result3 = parse_value_empty_quote();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfcookie_optional() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_domain();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_quote_char();
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_period();
                if (result4 !== null) {
                  result5 = parse_domain();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  result5 = parse_quote_char();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) {  return { name: n,  value: plib.flatten(v) }; })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_expires();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_cfcookie_expires();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) {  return { name: n,  value: v               }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_httponly();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_boolean();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) {  return { name: n,  value: v               }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_path();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_file_path();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) {  return { name: n,  value: v               }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_secure();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_boolean();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) {  return { name: n,  value: v               }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                      result0.push(result1);
                      result1 = parse_ws();
                    }
                  } else {
                    result0 = null;
                  }
                  if (result0 !== null) {
                    result1 = parse_str_value();
                    if (result1 !== null) {
                      result2 = parse_eql();
                      if (result2 !== null) {
                        result3 = parse_value_any();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, v) {  return { name: n,  value: v               }; })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfdump_required() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_var();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cfval();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfdump_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_output();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cfdump_output();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_format();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_cfdump_format();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_abort();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_boolean();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_label();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_any_non_whitespace();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_metainfo();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_boolean();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                      result0.push(result1);
                      result1 = parse_ws();
                    }
                  } else {
                    result0 = null;
                  }
                  if (result0 !== null) {
                    result1 = parse_str_top();
                    if (result1 !== null) {
                      result2 = parse_eql();
                      if (result2 !== null) {
                        result3 = parse_value_integer();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    result1 = parse_ws();
                    if (result1 !== null) {
                      result0 = [];
                      while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_ws();
                      }
                    } else {
                      result0 = null;
                    }
                    if (result0 !== null) {
                      result1 = parse_str_show();
                      if (result1 !== null) {
                        result2 = parse_eql();
                        if (result2 !== null) {
                          result3 = parse_value_list();
                          if (result3 === null) {
                            result3 = parse_value_any_non_whitespace();
                          }
                          if (result3 !== null) {
                            result0 = [result0, result1, result2, result3];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      result1 = parse_ws();
                      if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                          result0.push(result1);
                          result1 = parse_ws();
                        }
                      } else {
                        result0 = null;
                      }
                      if (result0 !== null) {
                        result1 = parse_str_hide();
                        if (result1 !== null) {
                          result2 = parse_eql();
                          if (result2 !== null) {
                            result3 = parse_value_list();
                            if (result3 === null) {
                              result3 = parse_value_any_non_whitespace();
                            }
                            if (result3 !== null) {
                              result0 = [result0, result1, result2, result3];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result1 = parse_ws();
                        if (result1 !== null) {
                          result0 = [];
                          while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_ws();
                          }
                        } else {
                          result0 = null;
                        }
                        if (result0 !== null) {
                          result1 = parse_str_keys();
                          if (result1 !== null) {
                            result2 = parse_eql();
                            if (result2 !== null) {
                              result3 = parse_value_integer();
                              if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          result1 = parse_ws();
                          if (result1 !== null) {
                            result0 = [];
                            while (result1 !== null) {
                              result0.push(result1);
                              result1 = parse_ws();
                            }
                          } else {
                            result0 = null;
                          }
                          if (result0 !== null) {
                            result1 = parse_str_expand();
                            if (result1 !== null) {
                              result2 = parse_eql();
                              if (result2 !== null) {
                                result3 = parse_value_boolean();
                                if (result3 !== null) {
                                  result0 = [result0, result1, result2, result3];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result1 = parse_ws();
                            if (result1 !== null) {
                              result0 = [];
                              while (result1 !== null) {
                                result0.push(result1);
                                result1 = parse_ws();
                              }
                            } else {
                              result0 = null;
                            }
                            if (result0 !== null) {
                              result1 = parse_str_showudfs();
                              if (result1 !== null) {
                                result2 = parse_eql();
                                if (result2 !== null) {
                                  result3 = parse_value_boolean();
                                  if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfparam_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_default();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_min();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_integer();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_max();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_integer();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_pattern();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_regex();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_type();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_cfparam_type();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfsetting_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.substr(pos, 18) === "enableCFoutputOnly") {
            result1 = "enableCFoutputOnly";
            pos += 18;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"enableCFoutputOnly\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_boolean();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: 'enable_cfoutput_only', value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            if (input.substr(pos, 14) === "requestTimeOut") {
              result1 = "requestTimeOut";
              pos += 14;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"requestTimeOut\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_integer();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: plib.underbar_name(n),       value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              if (input.substr(pos, 15) === "showDebugOutput") {
                result1 = "showDebugOutput";
                pos += 15;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"showDebugOutput\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_boolean();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: plib.underbar_name(n),       value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfsavecontent_required() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_variable();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any_non_whitespace();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cflog_required() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_text();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v}; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cflog_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_application();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_boolean();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_file();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_any();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_log();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_cflog_log();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_type();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_cflog_type();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cflog_log() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_str_application();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 9) === "scheduler") {
              result1 = "scheduler";
              pos += 9;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"scheduler\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_value_cflog_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 11) === "information") {
            result1 = "information";
            pos += 11;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"information\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 7) === "warning") {
              result1 = "warning";
              pos += 7;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"warning\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 5) === "error") {
                result1 = "error";
                pos += 5;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"error\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 5) === "fatal") {
                  result1 = "fatal";
                  pos += 5;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"fatal\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfflush_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_interval();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_integer();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfoutput_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.substr(pos, 18) === "groupCaseSensitive") {
            result1 = "groupCaseSensitive";
            pos += 18;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"groupCaseSensitive\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_boolean();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: plib.underbar_name(n), value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            if (input.substr(pos, 5) === "group") {
              result1 = "group";
              pos += 5;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"group\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_any();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n,                value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              if (input.substr(pos, 7) === "maxRows") {
                result1 = "maxRows";
                pos += 7;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"maxRows\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_integer();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: plib.underbar_name(n), value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_query();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_any();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n,                value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  if (input.substr(pos, 8) === "startRow") {
                    result1 = "startRow";
                    pos += 8;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"startRow\"");
                    }
                  }
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_integer();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: plib.underbar_name(n), value: v }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cftimer_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_label();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_type();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_cftimer_type();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_value_cftimer_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 6) === "inline") {
            result1 = "inline";
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"inline\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 7) === "outline") {
              result1 = "outline";
              pos += 7;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"outline\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 7) === "comment") {
                result1 = "comment";
                pos += 7;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"comment\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 5) === "debug") {
                  result1 = "debug";
                  pos += 5;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"debug\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cftrace_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_abort();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_boolean();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_category();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_any();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_inline();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_boolean();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_text();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_any();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_var();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_any();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                      result0.push(result1);
                      result1 = parse_ws();
                    }
                  } else {
                    result0 = null;
                  }
                  if (result0 !== null) {
                    result1 = parse_str_type();
                    if (result1 !== null) {
                      result2 = parse_eql();
                      if (result2 !== null) {
                        result3 = parse_value_cftrace_type();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cftrace_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 11) === "information") {
            result1 = "information";
            pos += 11;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"information\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 7) === "warning") {
              result1 = "warning";
              pos += 7;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"warning\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 5) === "error") {
                result1 = "error";
                pos += 5;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"error\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 17) === "fatal information") {
                  result1 = "fatal information";
                  pos += 17;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"fatal information\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfdbinfo_required_type() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_type();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cfdbinfo_type();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_cfdbinfo_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "dbnames") {
            result1 = "dbnames";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"dbnames\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 6) === "tables") {
              result1 = "tables";
              pos += 6;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"tables\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 7) === "columns") {
                result1 = "columns";
                pos += 7;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"columns\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 10) === "procedures") {
                  result1 = "procedures";
                  pos += 10;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"procedures\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result0 = parse_quote_char();
                if (result0 !== null) {
                  if (input.substr(pos, 11) === "foreignkeys") {
                    result1 = "foreignkeys";
                    pos += 11;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"foreignkeys\"");
                    }
                  }
                  if (result1 !== null) {
                    result2 = parse_quote_char();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result0 = parse_quote_char();
                  if (result0 !== null) {
                    if (input.substr(pos, 5) === "index") {
                      result1 = "index";
                      pos += 5;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"index\"");
                      }
                    }
                    if (result1 !== null) {
                      result2 = parse_quote_char();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfdbinfo_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_datasource();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_any();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_dbname();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_any();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_password();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_any();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_pattern();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_any();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_username();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_any();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                      result0.push(result1);
                      result1 = parse_ws();
                    }
                  } else {
                    result0 = null;
                  }
                  if (result0 !== null) {
                    result1 = parse_str_table();
                    if (result1 !== null) {
                      result2 = parse_eql();
                      if (result2 !== null) {
                        result3 = parse_value_any();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cftransaction_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_action();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cftransaction_action();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_isolation();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_cftransaction_isolation();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_savepoint();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_any();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_nested();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_boolean();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cftransaction_action() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "begin") {
            result1 = "begin";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"begin\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 6) === "commit") {
              result1 = "commit";
              pos += 6;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"commit\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 8) === "rollback") {
                result1 = "rollback";
                pos += 8;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"rollback\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 12) === "setsavepoint") {
                  result1 = "setsavepoint";
                  pos += 12;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"setsavepoint\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v; })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cftransaction_isolation() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 15) === "read_uncommited") {
            result1 = "read_uncommited";
            pos += 15;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"read_uncommited\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 13) === "read_commited") {
              result1 = "read_commited";
              pos += 13;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"read_commited\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 15) === "repeatable_read") {
                result1 = "repeatable_read";
                pos += 15;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"repeatable_read\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 12) === "serializable") {
                  result1 = "serializable";
                  pos += 12;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"serializable\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v; })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attr_cfqueryparam_required() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_value();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cfval();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr_cfqueryparam_optional() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_ws();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ws();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_str_cfsql_type();
          if (result1 !== null) {
            result2 = parse_eql();
            if (result2 !== null) {
              result3 = parse_value_cfqueryparam_type();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, v) { return { name: 'cf_sql_type', value: v }; })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result1 = parse_ws();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ws();
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_str_list();
            if (result1 !== null) {
              result2 = parse_eql();
              if (result2 !== null) {
                result3 = parse_value_boolean();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result1 = parse_ws();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_ws();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_str_maxlength();
              if (result1 !== null) {
                result2 = parse_eql();
                if (result2 !== null) {
                  result3 = parse_value_integer();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n, v) { return { name: 'max_length', value: v }; })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result1 = parse_ws();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_ws();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_str_null();
                if (result1 !== null) {
                  result2 = parse_eql();
                  if (result2 !== null) {
                    result3 = parse_value_boolean();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result1 = parse_ws();
                if (result1 !== null) {
                  result0 = [];
                  while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_ws();
                  }
                } else {
                  result0 = null;
                }
                if (result0 !== null) {
                  result1 = parse_str_scale();
                  if (result1 !== null) {
                    result2 = parse_eql();
                    if (result2 !== null) {
                      result3 = parse_value_integer();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result1 = parse_ws();
                  if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                      result0.push(result1);
                      result1 = parse_ws();
                    }
                  } else {
                    result0 = null;
                  }
                  if (result0 !== null) {
                    result1 = parse_str_separator();
                    if (result1 !== null) {
                      result2 = parse_eql();
                      if (result2 !== null) {
                        result3 = parse_value_any();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, v) { return { name: n, value: v }; })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfqueryparam_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 11) === "CF_SQL_CHAR") {
            result1 = "CF_SQL_CHAR";
            pos += 11;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CF_SQL_CHAR\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 13) === "CF_SQL_BIGINT") {
              result1 = "CF_SQL_BIGINT";
              pos += 13;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"CF_SQL_BIGINT\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 10) === "CF_SQL_BIT") {
                result1 = "CF_SQL_BIT";
                pos += 10;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"CF_SQL_BIT\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 11) === "CF_SQL_CHAR") {
                  result1 = "CF_SQL_CHAR";
                  pos += 11;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"CF_SQL_CHAR\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v; })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result0 = parse_quote_char();
                if (result0 !== null) {
                  if (input.substr(pos, 11) === "CF_SQL_BLOB") {
                    result1 = "CF_SQL_BLOB";
                    pos += 11;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"CF_SQL_BLOB\"");
                    }
                  }
                  if (result1 !== null) {
                    result2 = parse_quote_char();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result0 = parse_quote_char();
                  if (result0 !== null) {
                    if (input.substr(pos, 11) === "CF_SQL_CLOB") {
                      result1 = "CF_SQL_CLOB";
                      pos += 11;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"CF_SQL_CLOB\"");
                      }
                    }
                    if (result1 !== null) {
                      result2 = parse_quote_char();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_quote_char();
                    if (result0 !== null) {
                      if (input.substr(pos, 11) === "CF_SQL_DATE") {
                        result1 = "CF_SQL_DATE";
                        pos += 11;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"CF_SQL_DATE\"");
                        }
                      }
                      if (result1 !== null) {
                        result2 = parse_quote_char();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      result0 = parse_quote_char();
                      if (result0 !== null) {
                        if (input.substr(pos, 14) === "CF_SQL_DECIMAL") {
                          result1 = "CF_SQL_DECIMAL";
                          pos += 14;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"CF_SQL_DECIMAL\"");
                          }
                        }
                        if (result1 !== null) {
                          result2 = parse_quote_char();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_quote_char();
                        if (result0 !== null) {
                          if (input.substr(pos, 13) === "CF_SQL_DOUBLE") {
                            result1 = "CF_SQL_DOUBLE";
                            pos += 13;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"CF_SQL_DOUBLE\"");
                            }
                          }
                          if (result1 !== null) {
                            result2 = parse_quote_char();
                            if (result2 !== null) {
                              result0 = [result0, result1, result2];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          result0 = parse_quote_char();
                          if (result0 !== null) {
                            if (input.substr(pos, 12) === "CF_SQL_FLOAT") {
                              result1 = "CF_SQL_FLOAT";
                              pos += 12;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"CF_SQL_FLOAT\"");
                              }
                            }
                            if (result1 !== null) {
                              result2 = parse_quote_char();
                              if (result2 !== null) {
                                result0 = [result0, result1, result2];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result0 = parse_quote_char();
                            if (result0 !== null) {
                              if (input.substr(pos, 14) === "CF_SQL_IDSTAMP") {
                                result1 = "CF_SQL_IDSTAMP";
                                pos += 14;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"CF_SQL_IDSTAMP\"");
                                }
                              }
                              if (result1 !== null) {
                                result2 = parse_quote_char();
                                if (result2 !== null) {
                                  result0 = [result0, result1, result2];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              pos1 = pos;
                              result0 = parse_quote_char();
                              if (result0 !== null) {
                                if (input.substr(pos, 14) === "CF_SQL_INTEGER") {
                                  result1 = "CF_SQL_INTEGER";
                                  pos += 14;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"CF_SQL_INTEGER\"");
                                  }
                                }
                                if (result1 !== null) {
                                  result2 = parse_quote_char();
                                  if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                              if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                result0 = parse_quote_char();
                                if (result0 !== null) {
                                  if (input.substr(pos, 18) === "CF_SQL_LONGVARCHAR") {
                                    result1 = "CF_SQL_LONGVARCHAR";
                                    pos += 18;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"CF_SQL_LONGVARCHAR\"");
                                    }
                                  }
                                  if (result1 !== null) {
                                    result2 = parse_quote_char();
                                    if (result2 !== null) {
                                      result0 = [result0, result1, result2];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                }
                                if (result0 === null) {
                                  pos = pos0;
                                }
                                if (result0 === null) {
                                  pos0 = pos;
                                  pos1 = pos;
                                  result0 = parse_quote_char();
                                  if (result0 !== null) {
                                    if (input.substr(pos, 12) === "CF_SQL_MONEY") {
                                      result1 = "CF_SQL_MONEY";
                                      pos += 12;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"CF_SQL_MONEY\"");
                                      }
                                    }
                                    if (result1 !== null) {
                                      result2 = parse_quote_char();
                                      if (result2 !== null) {
                                        result0 = [result0, result1, result2];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                  }
                                  if (result0 === null) {
                                    pos = pos0;
                                  }
                                  if (result0 === null) {
                                    pos0 = pos;
                                    pos1 = pos;
                                    result0 = parse_quote_char();
                                    if (result0 !== null) {
                                      if (input.substr(pos, 13) === "CF_SQL_MONEY4") {
                                        result1 = "CF_SQL_MONEY4";
                                        pos += 13;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"CF_SQL_MONEY4\"");
                                        }
                                      }
                                      if (result1 !== null) {
                                        result2 = parse_quote_char();
                                        if (result2 !== null) {
                                          result0 = [result0, result1, result2];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                    }
                                    if (result0 === null) {
                                      pos = pos0;
                                    }
                                    if (result0 === null) {
                                      pos0 = pos;
                                      pos1 = pos;
                                      result0 = parse_quote_char();
                                      if (result0 !== null) {
                                        if (input.substr(pos, 14) === "CF_SQL_NUMERIC") {
                                          result1 = "CF_SQL_NUMERIC";
                                          pos += 14;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"CF_SQL_NUMERIC\"");
                                          }
                                        }
                                        if (result1 !== null) {
                                          result2 = parse_quote_char();
                                          if (result2 !== null) {
                                            result0 = [result0, result1, result2];
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                      }
                                      if (result0 === null) {
                                        pos = pos0;
                                      }
                                      if (result0 === null) {
                                        pos0 = pos;
                                        pos1 = pos;
                                        result0 = parse_quote_char();
                                        if (result0 !== null) {
                                          if (input.substr(pos, 11) === "CF_SQL_REAL") {
                                            result1 = "CF_SQL_REAL";
                                            pos += 11;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"CF_SQL_REAL\"");
                                            }
                                          }
                                          if (result1 !== null) {
                                            result2 = parse_quote_char();
                                            if (result2 !== null) {
                                              result0 = [result0, result1, result2];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                        }
                                        if (result0 === null) {
                                          pos = pos0;
                                        }
                                        if (result0 === null) {
                                          pos0 = pos;
                                          pos1 = pos;
                                          result0 = parse_quote_char();
                                          if (result0 !== null) {
                                            if (input.substr(pos, 16) === "CF_SQL_REFCURSOR") {
                                              result1 = "CF_SQL_REFCURSOR";
                                              pos += 16;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"CF_SQL_REFCURSOR\"");
                                              }
                                            }
                                            if (result1 !== null) {
                                              result2 = parse_quote_char();
                                              if (result2 !== null) {
                                                result0 = [result0, result1, result2];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                          }
                                          if (result0 === null) {
                                            pos = pos0;
                                          }
                                          if (result0 === null) {
                                            pos0 = pos;
                                            pos1 = pos;
                                            result0 = parse_quote_char();
                                            if (result0 !== null) {
                                              if (input.substr(pos, 15) === "CF_SQL_SMALLINT") {
                                                result1 = "CF_SQL_SMALLINT";
                                                pos += 15;
                                              } else {
                                                result1 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"CF_SQL_SMALLINT\"");
                                                }
                                              }
                                              if (result1 !== null) {
                                                result2 = parse_quote_char();
                                                if (result2 !== null) {
                                                  result0 = [result0, result1, result2];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                            if (result0 !== null) {
                                              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                            }
                                            if (result0 === null) {
                                              pos = pos0;
                                            }
                                            if (result0 === null) {
                                              pos0 = pos;
                                              pos1 = pos;
                                              result0 = parse_quote_char();
                                              if (result0 !== null) {
                                                if (input.substr(pos, 11) === "CF_SQL_TIME") {
                                                  result1 = "CF_SQL_TIME";
                                                  pos += 11;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"CF_SQL_TIME\"");
                                                  }
                                                }
                                                if (result1 !== null) {
                                                  result2 = parse_quote_char();
                                                  if (result2 !== null) {
                                                    result0 = [result0, result1, result2];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                              if (result0 !== null) {
                                                result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                              }
                                              if (result0 === null) {
                                                pos = pos0;
                                              }
                                              if (result0 === null) {
                                                pos0 = pos;
                                                pos1 = pos;
                                                result0 = parse_quote_char();
                                                if (result0 !== null) {
                                                  if (input.substr(pos, 16) === "CF_SQL_TIMESTAMP") {
                                                    result1 = "CF_SQL_TIMESTAMP";
                                                    pos += 16;
                                                  } else {
                                                    result1 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"CF_SQL_TIMESTAMP\"");
                                                    }
                                                  }
                                                  if (result1 !== null) {
                                                    result2 = parse_quote_char();
                                                    if (result2 !== null) {
                                                      result0 = [result0, result1, result2];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                                if (result0 !== null) {
                                                  result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                                }
                                                if (result0 === null) {
                                                  pos = pos0;
                                                }
                                                if (result0 === null) {
                                                  pos0 = pos;
                                                  pos1 = pos;
                                                  result0 = parse_quote_char();
                                                  if (result0 !== null) {
                                                    if (input.substr(pos, 14) === "CF_SQL_TINYINT") {
                                                      result1 = "CF_SQL_TINYINT";
                                                      pos += 14;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"CF_SQL_TINYINT\"");
                                                      }
                                                    }
                                                    if (result1 !== null) {
                                                      result2 = parse_quote_char();
                                                      if (result2 !== null) {
                                                        result0 = [result0, result1, result2];
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                  if (result0 !== null) {
                                                    result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                                  }
                                                  if (result0 === null) {
                                                    pos = pos0;
                                                  }
                                                  if (result0 === null) {
                                                    pos0 = pos;
                                                    pos1 = pos;
                                                    result0 = parse_quote_char();
                                                    if (result0 !== null) {
                                                      if (input.substr(pos, 14) === "CF_SQL_VARCHAR") {
                                                        result1 = "CF_SQL_VARCHAR";
                                                        pos += 14;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"CF_SQL_VARCHAR\"");
                                                        }
                                                      }
                                                      if (result1 !== null) {
                                                        result2 = parse_quote_char();
                                                        if (result2 !== null) {
                                                          result0 = [result0, result1, result2];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                    if (result0 !== null) {
                                                      result0 = (function(offset, v) { return v; })(pos0, result0[1]);
                                                    }
                                                    if (result0 === null) {
                                                      pos = pos0;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_regex() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result2 = parse_str_any_non_quote();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_str_any_non_quote();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return new RegExp(plib.flatten(v)); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_cfparam_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_str_any();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            result1 = parse_str_array();
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              result1 = parse_str_binary();
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                result1 = parse_str_boolean();
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result0 = parse_quote_char();
                if (result0 !== null) {
                  result1 = parse_str_country_code();
                  if (result1 !== null) {
                    result2 = parse_quote_char();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result0 = parse_quote_char();
                  if (result0 !== null) {
                    result1 = parse_str_creditcard();
                    if (result1 !== null) {
                      result2 = parse_quote_char();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_quote_char();
                    if (result0 !== null) {
                      result1 = parse_str_date();
                      if (result1 !== null) {
                        result2 = parse_quote_char();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      result0 = parse_quote_char();
                      if (result0 !== null) {
                        result1 = parse_str_email();
                        if (result1 !== null) {
                          result2 = parse_quote_char();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_quote_char();
                        if (result0 !== null) {
                          result1 = parse_str_float();
                          if (result1 !== null) {
                            result2 = parse_quote_char();
                            if (result2 !== null) {
                              result0 = [result0, result1, result2];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          result0 = parse_quote_char();
                          if (result0 !== null) {
                            result1 = parse_str_guid();
                            if (result1 !== null) {
                              result2 = parse_quote_char();
                              if (result2 !== null) {
                                result0 = [result0, result1, result2];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                          if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result0 = parse_quote_char();
                            if (result0 !== null) {
                              result1 = parse_str_integer();
                              if (result1 !== null) {
                                result2 = parse_quote_char();
                                if (result2 !== null) {
                                  result0 = [result0, result1, result2];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                            }
                            if (result0 === null) {
                              pos = pos0;
                            }
                            if (result0 === null) {
                              pos0 = pos;
                              pos1 = pos;
                              result0 = parse_quote_char();
                              if (result0 !== null) {
                                result1 = parse_str_ip();
                                if (result1 !== null) {
                                  result2 = parse_quote_char();
                                  if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 !== null) {
                                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                              }
                              if (result0 === null) {
                                pos = pos0;
                              }
                              if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                result0 = parse_quote_char();
                                if (result0 !== null) {
                                  result1 = parse_str_json();
                                  if (result1 !== null) {
                                    result2 = parse_quote_char();
                                    if (result2 !== null) {
                                      result0 = [result0, result1, result2];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 !== null) {
                                  result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                }
                                if (result0 === null) {
                                  pos = pos0;
                                }
                                if (result0 === null) {
                                  pos0 = pos;
                                  pos1 = pos;
                                  result0 = parse_quote_char();
                                  if (result0 !== null) {
                                    result1 = parse_str_numeric();
                                    if (result1 !== null) {
                                      result2 = parse_quote_char();
                                      if (result2 !== null) {
                                        result0 = [result0, result1, result2];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 !== null) {
                                    result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                  }
                                  if (result0 === null) {
                                    pos = pos0;
                                  }
                                  if (result0 === null) {
                                    pos0 = pos;
                                    pos1 = pos;
                                    result0 = parse_quote_char();
                                    if (result0 !== null) {
                                      result1 = parse_str_query();
                                      if (result1 !== null) {
                                        result2 = parse_quote_char();
                                        if (result2 !== null) {
                                          result0 = [result0, result1, result2];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                    if (result0 !== null) {
                                      result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                    }
                                    if (result0 === null) {
                                      pos = pos0;
                                    }
                                    if (result0 === null) {
                                      pos0 = pos;
                                      pos1 = pos;
                                      result0 = parse_quote_char();
                                      if (result0 !== null) {
                                        result1 = parse_str_range();
                                        if (result1 !== null) {
                                          result2 = parse_quote_char();
                                          if (result2 !== null) {
                                            result0 = [result0, result1, result2];
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                      if (result0 !== null) {
                                        result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                      }
                                      if (result0 === null) {
                                        pos = pos0;
                                      }
                                      if (result0 === null) {
                                        pos0 = pos;
                                        pos1 = pos;
                                        result0 = parse_quote_char();
                                        if (result0 !== null) {
                                          result1 = parse_str_regex();
                                          if (result1 !== null) {
                                            result2 = parse_quote_char();
                                            if (result2 !== null) {
                                              result0 = [result0, result1, result2];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                        if (result0 !== null) {
                                          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                        }
                                        if (result0 === null) {
                                          pos = pos0;
                                        }
                                        if (result0 === null) {
                                          pos0 = pos;
                                          pos1 = pos;
                                          result0 = parse_quote_char();
                                          if (result0 !== null) {
                                            result1 = parse_str_regular_expression();
                                            if (result1 !== null) {
                                              result2 = parse_quote_char();
                                              if (result2 !== null) {
                                                result0 = [result0, result1, result2];
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                          if (result0 !== null) {
                                            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                          }
                                          if (result0 === null) {
                                            pos = pos0;
                                          }
                                          if (result0 === null) {
                                            pos0 = pos;
                                            pos1 = pos;
                                            result0 = parse_quote_char();
                                            if (result0 !== null) {
                                              result1 = parse_str_social_security_number();
                                              if (result1 !== null) {
                                                result2 = parse_quote_char();
                                                if (result2 !== null) {
                                                  result0 = [result0, result1, result2];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                            if (result0 !== null) {
                                              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                            }
                                            if (result0 === null) {
                                              pos = pos0;
                                            }
                                            if (result0 === null) {
                                              pos0 = pos;
                                              pos1 = pos;
                                              result0 = parse_quote_char();
                                              if (result0 !== null) {
                                                result1 = parse_str_ssn();
                                                if (result1 !== null) {
                                                  result2 = parse_quote_char();
                                                  if (result2 !== null) {
                                                    result0 = [result0, result1, result2];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                              if (result0 !== null) {
                                                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                              }
                                              if (result0 === null) {
                                                pos = pos0;
                                              }
                                              if (result0 === null) {
                                                pos0 = pos;
                                                pos1 = pos;
                                                result0 = parse_quote_char();
                                                if (result0 !== null) {
                                                  result1 = parse_str_string();
                                                  if (result1 !== null) {
                                                    result2 = parse_quote_char();
                                                    if (result2 !== null) {
                                                      result0 = [result0, result1, result2];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                                if (result0 !== null) {
                                                  result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                }
                                                if (result0 === null) {
                                                  pos = pos0;
                                                }
                                                if (result0 === null) {
                                                  pos0 = pos;
                                                  pos1 = pos;
                                                  result0 = parse_quote_char();
                                                  if (result0 !== null) {
                                                    result1 = parse_str_struct();
                                                    if (result1 !== null) {
                                                      result2 = parse_quote_char();
                                                      if (result2 !== null) {
                                                        result0 = [result0, result1, result2];
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                  if (result0 !== null) {
                                                    result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                  }
                                                  if (result0 === null) {
                                                    pos = pos0;
                                                  }
                                                  if (result0 === null) {
                                                    pos0 = pos;
                                                    pos1 = pos;
                                                    result0 = parse_quote_char();
                                                    if (result0 !== null) {
                                                      result1 = parse_str_telephone();
                                                      if (result1 !== null) {
                                                        result2 = parse_quote_char();
                                                        if (result2 !== null) {
                                                          result0 = [result0, result1, result2];
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                    if (result0 !== null) {
                                                      result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                    }
                                                    if (result0 === null) {
                                                      pos = pos0;
                                                    }
                                                    if (result0 === null) {
                                                      pos0 = pos;
                                                      pos1 = pos;
                                                      result0 = parse_quote_char();
                                                      if (result0 !== null) {
                                                        result1 = parse_str_time();
                                                        if (result1 !== null) {
                                                          result2 = parse_quote_char();
                                                          if (result2 !== null) {
                                                            result0 = [result0, result1, result2];
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                      if (result0 !== null) {
                                                        result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                      }
                                                      if (result0 === null) {
                                                        pos = pos0;
                                                      }
                                                      if (result0 === null) {
                                                        pos0 = pos;
                                                        pos1 = pos;
                                                        result0 = parse_quote_char();
                                                        if (result0 !== null) {
                                                          result1 = parse_str_url();
                                                          if (result1 !== null) {
                                                            result2 = parse_quote_char();
                                                            if (result2 !== null) {
                                                              result0 = [result0, result1, result2];
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                        } else {
                                                          result0 = null;
                                                          pos = pos1;
                                                        }
                                                        if (result0 !== null) {
                                                          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                        }
                                                        if (result0 === null) {
                                                          pos = pos0;
                                                        }
                                                        if (result0 === null) {
                                                          pos0 = pos;
                                                          pos1 = pos;
                                                          result0 = parse_quote_char();
                                                          if (result0 !== null) {
                                                            result1 = parse_str_uuid();
                                                            if (result1 !== null) {
                                                              result2 = parse_quote_char();
                                                              if (result2 !== null) {
                                                                result0 = [result0, result1, result2];
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                          } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                          }
                                                          if (result0 !== null) {
                                                            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                          }
                                                          if (result0 === null) {
                                                            pos = pos0;
                                                          }
                                                          if (result0 === null) {
                                                            pos0 = pos;
                                                            pos1 = pos;
                                                            result0 = parse_quote_char();
                                                            if (result0 !== null) {
                                                              result1 = parse_str_variable_name();
                                                              if (result1 !== null) {
                                                                result2 = parse_quote_char();
                                                                if (result2 !== null) {
                                                                  result0 = [result0, result1, result2];
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                            } else {
                                                              result0 = null;
                                                              pos = pos1;
                                                            }
                                                            if (result0 !== null) {
                                                              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                            }
                                                            if (result0 === null) {
                                                              pos = pos0;
                                                            }
                                                            if (result0 === null) {
                                                              pos0 = pos;
                                                              pos1 = pos;
                                                              result0 = parse_quote_char();
                                                              if (result0 !== null) {
                                                                result1 = parse_str_xml();
                                                                if (result1 !== null) {
                                                                  result2 = parse_quote_char();
                                                                  if (result2 !== null) {
                                                                    result0 = [result0, result1, result2];
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                              } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                              }
                                                              if (result0 !== null) {
                                                                result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                              }
                                                              if (result0 === null) {
                                                                pos = pos0;
                                                              }
                                                              if (result0 === null) {
                                                                pos0 = pos;
                                                                pos1 = pos;
                                                                result0 = parse_quote_char();
                                                                if (result0 !== null) {
                                                                  result1 = parse_str_zip();
                                                                  if (result1 !== null) {
                                                                    result2 = parse_quote_char();
                                                                    if (result2 !== null) {
                                                                      result0 = [result0, result1, result2];
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                } else {
                                                                  result0 = null;
                                                                  pos = pos1;
                                                                }
                                                                if (result0 !== null) {
                                                                  result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                                }
                                                                if (result0 === null) {
                                                                  pos = pos0;
                                                                }
                                                                if (result0 === null) {
                                                                  pos0 = pos;
                                                                  pos1 = pos;
                                                                  result0 = parse_quote_char();
                                                                  if (result0 !== null) {
                                                                    result1 = parse_str_zipcode();
                                                                    if (result1 !== null) {
                                                                      result2 = parse_quote_char();
                                                                      if (result2 !== null) {
                                                                        result0 = [result0, result1, result2];
                                                                      } else {
                                                                        result0 = null;
                                                                        pos = pos1;
                                                                      }
                                                                    } else {
                                                                      result0 = null;
                                                                      pos = pos1;
                                                                    }
                                                                  } else {
                                                                    result0 = null;
                                                                    pos = pos1;
                                                                  }
                                                                  if (result0 !== null) {
                                                                    result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
                                                                  }
                                                                  if (result0 === null) {
                                                                    pos = pos0;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfcookie_expires() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 5) === "never") {
            result1 = "never";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"never\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { human_date('30 years'); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 3) === "now") {
              result1 = "now";
              pos += 3;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"now\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return new Date(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              result1 = parse_date_time();
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                result1 = parse_date();
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, v) { return v; })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                result0 = parse_value_integer();
                if (result0 !== null) {
                  result0 = (function(offset, v) { return v; })(pos0, result0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfdump_output() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 7) === "browser") {
            result1 = "browser";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"browser\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 7) === "console") {
              result1 = "console";
              pos += 7;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"console\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              result1 = parse_str_file();
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v; })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfdump_format() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_str_text();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            result1 = parse_str_html();
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_value_cferr_type() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          if (input.substr(pos, 9) === "exception") {
            result1 = "exception";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"exception\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 10) === "validation") {
              result1 = "validation";
              pos += 10;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"validation\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 7) === "request") {
                result1 = "request";
                pos += 7;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"request\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, v) { return v.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_value_cferr_exception() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_str_application();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_quote_char();
          if (result0 !== null) {
            if (input.substr(pos, 8) === "database") {
              result1 = "database";
              pos += 8;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"database\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_quote_char();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_quote_char();
            if (result0 !== null) {
              if (input.substr(pos, 8) === "template") {
                result1 = "template";
                pos += 8;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"template\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_quote_char();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_quote_char();
              if (result0 !== null) {
                if (input.substr(pos, 8) === "security") {
                  result1 = "security";
                  pos += 8;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"security\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_quote_char();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result0 = parse_quote_char();
                if (result0 !== null) {
                  if (input.substr(pos, 6) === "object") {
                    result1 = "object";
                    pos += 6;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"object\"");
                    }
                  }
                  if (result1 !== null) {
                    result2 = parse_quote_char();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  result0 = parse_quote_char();
                  if (result0 !== null) {
                    if (input.substr(pos, 14) === "missingInclude") {
                      result1 = "missingInclude";
                      pos += 14;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"missingInclude\"");
                      }
                    }
                    if (result1 !== null) {
                      result2 = parse_quote_char();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_quote_char();
                    if (result0 !== null) {
                      if (input.substr(pos, 10) === "expression") {
                        result1 = "expression";
                        pos += 10;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"expression\"");
                        }
                      }
                      if (result1 !== null) {
                        result2 = parse_quote_char();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      result0 = parse_quote_char();
                      if (result0 !== null) {
                        if (input.substr(pos, 4) === "lock") {
                          result1 = "lock";
                          pos += 4;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"lock\"");
                          }
                        }
                        if (result1 !== null) {
                          result2 = parse_quote_char();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                      if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_quote_char();
                        if (result0 !== null) {
                          if (input.substr(pos, 11) === "custom_type") {
                            result1 = "custom_type";
                            pos += 11;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"custom_type\"");
                            }
                          }
                          if (result1 !== null) {
                            result2 = parse_quote_char();
                            if (result2 !== null) {
                              result0 = [result0, result1, result2];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
                        }
                        if (result0 === null) {
                          pos = pos0;
                        }
                        if (result0 === null) {
                          pos0 = pos;
                          pos1 = pos;
                          result0 = parse_quote_char();
                          if (result0 !== null) {
                            result1 = parse_str_any();
                            if (result1 !== null) {
                              result2 = parse_quote_char();
                              if (result2 !== null) {
                                result0 = [result0, result1, result2];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, n) { return n.toLowerCase(); })(pos0, result0[1]);
                          }
                          if (result0 === null) {
                            pos = pos0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_str_abort() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_r();
              if (result3 !== null) {
                result4 = parse_t();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_action() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_o();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_all() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_l();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_any() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_n();
          if (result1 !== null) {
            result2 = parse_y();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_application() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_p();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_c();
                  if (result5 !== null) {
                    result6 = parse_a();
                    if (result6 !== null) {
                      result7 = parse_t();
                      if (result7 !== null) {
                        result8 = parse_i();
                        if (result8 !== null) {
                          result9 = parse_o();
                          if (result9 !== null) {
                            result10 = parse_n();
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_applicationtimeout() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_p();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_c();
                  if (result5 !== null) {
                    result6 = parse_a();
                    if (result6 !== null) {
                      result7 = parse_t();
                      if (result7 !== null) {
                        result8 = parse_i();
                        if (result8 !== null) {
                          result9 = parse_o();
                          if (result9 !== null) {
                            result10 = parse_n();
                            if (result10 !== null) {
                              result11 = parse_t();
                              if (result11 !== null) {
                                result12 = parse_i();
                                if (result12 !== null) {
                                  result13 = parse_m();
                                  if (result13 !== null) {
                                    result14 = parse_e();
                                    if (result14 !== null) {
                                      result15 = parse_o();
                                      if (result15 !== null) {
                                        result16 = parse_u();
                                        if (result16 !== null) {
                                          result17 = parse_t();
                                          if (result17 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17];
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_array() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_r();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_y();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_basetag() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_b();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_t();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_g();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_binary() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_b();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_y();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_boolean() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_b();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_n();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_category() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_g();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      result7 = parse_y();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfapplication() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_a();
            if (result2 !== null) {
              result3 = parse_p();
              if (result3 !== null) {
                result4 = parse_p();
                if (result4 !== null) {
                  result5 = parse_l();
                  if (result5 !== null) {
                    result6 = parse_i();
                    if (result6 !== null) {
                      result7 = parse_c();
                      if (result7 !== null) {
                        result8 = parse_a();
                        if (result8 !== null) {
                          result9 = parse_t();
                          if (result9 !== null) {
                            result10 = parse_i();
                            if (result10 !== null) {
                              result11 = parse_o();
                              if (result11 !== null) {
                                result12 = parse_n();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfassociate() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_a();
            if (result2 !== null) {
              result3 = parse_s();
              if (result3 !== null) {
                result4 = parse_s();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_c();
                    if (result6 !== null) {
                      result7 = parse_i();
                      if (result7 !== null) {
                        result8 = parse_a();
                        if (result8 !== null) {
                          result9 = parse_t();
                          if (result9 !== null) {
                            result10 = parse_e();
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfcookie() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_o();
              if (result3 !== null) {
                result4 = parse_o();
                if (result4 !== null) {
                  result5 = parse_k();
                  if (result5 !== null) {
                    result6 = parse_i();
                    if (result6 !== null) {
                      result7 = parse_e();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfdbinfo() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_d();
            if (result2 !== null) {
              result3 = parse_b();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result6 = parse_f();
                    if (result6 !== null) {
                      result7 = parse_o();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfdump() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_d();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_m();
                if (result4 !== null) {
                  result5 = parse_p();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cferror() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_e();
            if (result2 !== null) {
              result3 = parse_r();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfflush() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_f();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_u();
                if (result4 !== null) {
                  result5 = parse_s();
                  if (result5 !== null) {
                    result6 = parse_h();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cflog() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result3 = parse_o();
              if (result3 !== null) {
                result4 = parse_g();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfparam() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_m();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfqueryparam() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_q();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_r();
                  if (result5 !== null) {
                    result6 = parse_y();
                    if (result6 !== null) {
                      result7 = parse_p();
                      if (result7 !== null) {
                        result8 = parse_a();
                        if (result8 !== null) {
                          result9 = parse_r();
                          if (result9 !== null) {
                            result10 = parse_a();
                            if (result10 !== null) {
                              result11 = parse_m();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cftimer() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_m();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cftrace() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_r();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_c();
                  if (result5 !== null) {
                    result6 = parse_e();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cftransaction() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_r();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result6 = parse_s();
                    if (result6 !== null) {
                      result7 = parse_a();
                      if (result7 !== null) {
                        result8 = parse_c();
                        if (result8 !== null) {
                          result9 = parse_t();
                          if (result9 !== null) {
                            result10 = parse_i();
                            if (result10 !== null) {
                              result11 = parse_o();
                              if (result11 !== null) {
                                result12 = parse_n();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cfsql_type() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_f();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_q();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_y();
                    if (result6 !== null) {
                      result7 = parse_p();
                      if (result7 !== null) {
                        result8 = parse_e();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_clientmanagement() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_l();
          if (result1 !== null) {
            result2 = parse_i();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_m();
                    if (result6 !== null) {
                      result7 = parse_a();
                      if (result7 !== null) {
                        result8 = parse_n();
                        if (result8 !== null) {
                          result9 = parse_a();
                          if (result9 !== null) {
                            result10 = parse_g();
                            if (result10 !== null) {
                              result11 = parse_e();
                              if (result11 !== null) {
                                result12 = parse_m();
                                if (result12 !== null) {
                                  result13 = parse_e();
                                  if (result13 !== null) {
                                    result14 = parse_n();
                                    if (result14 !== null) {
                                      result15 = parse_t();
                                      if (result15 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_clientstorage() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_l();
          if (result1 !== null) {
            result2 = parse_i();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_s();
                    if (result6 !== null) {
                      result7 = parse_t();
                      if (result7 !== null) {
                        result8 = parse_o();
                        if (result8 !== null) {
                          result9 = parse_r();
                          if (result9 !== null) {
                            result10 = parse_a();
                            if (result10 !== null) {
                              result11 = parse_g();
                              if (result11 !== null) {
                                result12 = parse_e();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_cookie() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_k();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_country_code() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_u();
            if (result2 !== null) {
              result3 = parse_n();
              if (result3 !== null) {
                result4 = parse_t();
                if (result4 !== null) {
                  result5 = parse_r();
                  if (result5 !== null) {
                    result6 = parse_y();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 95) {
                        result7 = "_";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"_\"");
                        }
                      }
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = parse_c();
                        if (result8 !== null) {
                          result9 = parse_o();
                          if (result9 !== null) {
                            result10 = parse_d();
                            if (result10 !== null) {
                              result11 = parse_e();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_creditcard() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_c();
        if (result0 !== null) {
          result1 = parse_r();
          if (result1 !== null) {
            result2 = parse_e();
            if (result2 !== null) {
              result3 = parse_d();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 95) {
                      result6 = "_";
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_c();
                      if (result7 !== null) {
                        result8 = parse_a();
                        if (result8 !== null) {
                          result9 = parse_r();
                          if (result9 !== null) {
                            result10 = parse_d();
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_datasource() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_d();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_s();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_u();
                    if (result6 !== null) {
                      result7 = parse_r();
                      if (result7 !== null) {
                        result8 = parse_c();
                        if (result8 !== null) {
                          result9 = parse_e();
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_datacollection() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_d();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_c();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_l();
                    if (result6 !== null) {
                      result7 = parse_l();
                      if (result7 !== null) {
                        result8 = parse_e();
                        if (result8 !== null) {
                          result9 = parse_c();
                          if (result9 !== null) {
                            result10 = parse_t();
                            if (result10 !== null) {
                              result11 = parse_i();
                              if (result11 !== null) {
                                result12 = parse_o();
                                if (result12 !== null) {
                                  result13 = parse_n();
                                  if (result13 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_date() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_d();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_default() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_d();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_f();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_u();
                if (result4 !== null) {
                  result5 = parse_l();
                  if (result5 !== null) {
                    result6 = parse_t();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_dbname() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_d();
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_m();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_domain() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_d();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_m();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_email() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_e();
        if (result0 !== null) {
          result1 = parse_m();
          if (result1 !== null) {
            result2 = parse_a();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_expand() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_e();
        if (result0 !== null) {
          result1 = parse_x();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_d();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_expires() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_e();
        if (result0 !== null) {
          result1 = parse_x();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result6 = parse_s();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_exception() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_e();
        if (result0 !== null) {
          result1 = parse_x();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_p();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_i();
                    if (result6 !== null) {
                      result7 = parse_o();
                      if (result7 !== null) {
                        result8 = parse_n();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_file() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_f();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_float() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_f();
        if (result0 !== null) {
          result1 = parse_l();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_t();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_format() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_f();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_m();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_googlemapkey() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_g();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_g();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result6 = parse_m();
                    if (result6 !== null) {
                      result7 = parse_a();
                      if (result7 !== null) {
                        result8 = parse_p();
                        if (result8 !== null) {
                          result9 = parse_k();
                          if (result9 !== null) {
                            result10 = parse_e();
                            if (result10 !== null) {
                              result11 = parse_y();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_guid() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_g();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_i();
            if (result2 !== null) {
              result3 = parse_d();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_hide() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_h();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_d();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_html() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_h();
        if (result0 !== null) {
          result1 = parse_t();
          if (result1 !== null) {
            result2 = parse_m();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_httponly() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_h();
        if (result0 !== null) {
          result1 = parse_t();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_p();
              if (result3 !== null) {
                result4 = parse_o();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result6 = parse_l();
                    if (result6 !== null) {
                      result7 = parse_y();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_inline() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_i();
        if (result0 !== null) {
          result1 = parse_n();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_integer() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_i();
        if (result0 !== null) {
          result1 = parse_n();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_g();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_interval() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_i();
        if (result0 !== null) {
          result1 = parse_n();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_v();
                  if (result5 !== null) {
                    result6 = parse_a();
                    if (result6 !== null) {
                      result7 = parse_l();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_ip() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_i();
        if (result0 !== null) {
          result1 = parse_p();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_isolation() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_i();
        if (result0 !== null) {
          result1 = parse_s();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_i();
                    if (result6 !== null) {
                      result7 = parse_o();
                      if (result7 !== null) {
                        result8 = parse_n();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_json() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_j();
        if (result0 !== null) {
          result1 = parse_s();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_n();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_keys() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_k();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_y();
            if (result2 !== null) {
              result3 = parse_s();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_label() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_l();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_b();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_list() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_l();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_t();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_log() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_l();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_g();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_loginstorage() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_l();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_g();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_s();
                  if (result5 !== null) {
                    result6 = parse_t();
                    if (result6 !== null) {
                      result7 = parse_o();
                      if (result7 !== null) {
                        result8 = parse_r();
                        if (result8 !== null) {
                          result9 = parse_a();
                          if (result9 !== null) {
                            result10 = parse_g();
                            if (result10 !== null) {
                              result11 = parse_e();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_mail_to() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_i();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 95) {
                  result4 = "_";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"_\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_o();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_maxlength() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_x();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result6 = parse_g();
                    if (result6 !== null) {
                      result7 = parse_t();
                      if (result7 !== null) {
                        result8 = parse_h();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_metainfo() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_n();
                  if (result5 !== null) {
                    result6 = parse_f();
                    if (result6 !== null) {
                      result7 = parse_o();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_min() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_max() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_m();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_x();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_name() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_m();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_nested() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_t();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_d();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_none() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_null() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_numeric() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_m();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_i();
                  if (result5 !== null) {
                    result6 = parse_c();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_output() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_o();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_p();
              if (result3 !== null) {
                result4 = parse_u();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_password() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_p();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_s();
              if (result3 !== null) {
                result4 = parse_w();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      result7 = parse_d();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_pattern() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_p();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_t();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_r();
                  if (result5 !== null) {
                    result6 = parse_n();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_path() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_p();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_h();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_query() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_q();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_e();
            if (result2 !== null) {
              result3 = parse_r();
              if (result3 !== null) {
                result4 = parse_y();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_range() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_r();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result3 = parse_g();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_s();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_regex() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_r();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_g();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_x();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_registry() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_r();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_g();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_s();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      result7 = parse_y();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_regular_expression() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_r();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_g();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_r();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 95) {
                        result7 = "_";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"_\"");
                        }
                      }
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = parse_e();
                        if (result8 !== null) {
                          result9 = parse_x();
                          if (result9 !== null) {
                            result10 = parse_p();
                            if (result10 !== null) {
                              result11 = parse_r();
                              if (result11 !== null) {
                                result12 = parse_e();
                                if (result12 !== null) {
                                  result13 = parse_s();
                                  if (result13 !== null) {
                                    result14 = parse_s();
                                    if (result14 !== null) {
                                      result15 = parse_i();
                                      if (result15 !== null) {
                                        result16 = parse_o();
                                        if (result16 !== null) {
                                          result17 = parse_n();
                                          if (result17 !== null) {
                                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17];
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_savepoint() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_v();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_p();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_i();
                    if (result6 !== null) {
                      result7 = parse_n();
                      if (result7 !== null) {
                        result8 = parse_t();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_secure() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_scale() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            result2 = parse_a();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_scriptprotect() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_p();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result6 = parse_p();
                    if (result6 !== null) {
                      result7 = parse_r();
                      if (result7 !== null) {
                        result8 = parse_o();
                        if (result8 !== null) {
                          result9 = parse_t();
                          if (result9 !== null) {
                            result10 = parse_e();
                            if (result10 !== null) {
                              result11 = parse_c();
                              if (result11 !== null) {
                                result12 = parse_t();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_securejson() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result6 = parse_j();
                    if (result6 !== null) {
                      result7 = parse_s();
                      if (result7 !== null) {
                        result8 = parse_o();
                        if (result8 !== null) {
                          result9 = parse_n();
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_securejsonprefix() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_e();
                  if (result5 !== null) {
                    result6 = parse_j();
                    if (result6 !== null) {
                      result7 = parse_s();
                      if (result7 !== null) {
                        result8 = parse_o();
                        if (result8 !== null) {
                          result9 = parse_n();
                          if (result9 !== null) {
                            result10 = parse_p();
                            if (result10 !== null) {
                              result11 = parse_r();
                              if (result11 !== null) {
                                result12 = parse_e();
                                if (result12 !== null) {
                                  result13 = parse_f();
                                  if (result13 !== null) {
                                    result14 = parse_i();
                                    if (result14 !== null) {
                                      result15 = parse_x();
                                      if (result15 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_serversideformvalidation() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_v();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result5 = parse_r();
                  if (result5 !== null) {
                    result6 = parse_s();
                    if (result6 !== null) {
                      result7 = parse_i();
                      if (result7 !== null) {
                        result8 = parse_d();
                        if (result8 !== null) {
                          result9 = parse_e();
                          if (result9 !== null) {
                            result10 = parse_f();
                            if (result10 !== null) {
                              result11 = parse_o();
                              if (result11 !== null) {
                                result12 = parse_r();
                                if (result12 !== null) {
                                  result13 = parse_m();
                                  if (result13 !== null) {
                                    result14 = parse_v();
                                    if (result14 !== null) {
                                      result15 = parse_a();
                                      if (result15 !== null) {
                                        result16 = parse_l();
                                        if (result16 !== null) {
                                          result17 = parse_i();
                                          if (result17 !== null) {
                                            result18 = parse_d();
                                            if (result18 !== null) {
                                              result19 = parse_a();
                                              if (result19 !== null) {
                                                result20 = parse_t();
                                                if (result20 !== null) {
                                                  result21 = parse_i();
                                                  if (result21 !== null) {
                                                    result22 = parse_o();
                                                    if (result22 !== null) {
                                                      result23 = parse_n();
                                                      if (result23 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23];
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_separator() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_a();
              if (result3 !== null) {
                result4 = parse_r();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_t();
                    if (result6 !== null) {
                      result7 = parse_o();
                      if (result7 !== null) {
                        result8 = parse_r();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_session() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_s();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_n();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_sessionmanagement() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_s();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_n();
                    if (result6 !== null) {
                      result7 = parse_m();
                      if (result7 !== null) {
                        result8 = parse_a();
                        if (result8 !== null) {
                          result9 = parse_n();
                          if (result9 !== null) {
                            result10 = parse_a();
                            if (result10 !== null) {
                              result11 = parse_g();
                              if (result11 !== null) {
                                result12 = parse_e();
                                if (result12 !== null) {
                                  result13 = parse_m();
                                  if (result13 !== null) {
                                    result14 = parse_e();
                                    if (result14 !== null) {
                                      result15 = parse_n();
                                      if (result15 !== null) {
                                        result16 = parse_t();
                                        if (result16 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_sessiontimeout() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result3 = parse_s();
              if (result3 !== null) {
                result4 = parse_i();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_n();
                    if (result6 !== null) {
                      result7 = parse_t();
                      if (result7 !== null) {
                        result8 = parse_i();
                        if (result8 !== null) {
                          result9 = parse_m();
                          if (result9 !== null) {
                            result10 = parse_e();
                            if (result10 !== null) {
                              result11 = parse_o();
                              if (result11 !== null) {
                                result12 = parse_u();
                                if (result12 !== null) {
                                  result13 = parse_t();
                                  if (result13 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_setclientcookies() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_c();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result5 = parse_i();
                  if (result5 !== null) {
                    result6 = parse_e();
                    if (result6 !== null) {
                      result7 = parse_n();
                      if (result7 !== null) {
                        result8 = parse_t();
                        if (result8 !== null) {
                          result9 = parse_c();
                          if (result9 !== null) {
                            result10 = parse_o();
                            if (result10 !== null) {
                              result11 = parse_o();
                              if (result11 !== null) {
                                result12 = parse_k();
                                if (result12 !== null) {
                                  result13 = parse_i();
                                  if (result13 !== null) {
                                    result14 = parse_e();
                                    if (result14 !== null) {
                                      result15 = parse_s();
                                      if (result15 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_setdomaincookies() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_t();
            if (result2 !== null) {
              result3 = parse_d();
              if (result3 !== null) {
                result4 = parse_o();
                if (result4 !== null) {
                  result5 = parse_m();
                  if (result5 !== null) {
                    result6 = parse_a();
                    if (result6 !== null) {
                      result7 = parse_i();
                      if (result7 !== null) {
                        result8 = parse_n();
                        if (result8 !== null) {
                          result9 = parse_c();
                          if (result9 !== null) {
                            result10 = parse_o();
                            if (result10 !== null) {
                              result11 = parse_o();
                              if (result11 !== null) {
                                result12 = parse_k();
                                if (result12 !== null) {
                                  result13 = parse_i();
                                  if (result13 !== null) {
                                    result14 = parse_e();
                                    if (result14 !== null) {
                                      result15 = parse_s();
                                      if (result15 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_show() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_h();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_w();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_showudfs() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_h();
          if (result1 !== null) {
            result2 = parse_o();
            if (result2 !== null) {
              result3 = parse_w();
              if (result3 !== null) {
                result4 = parse_u();
                if (result4 !== null) {
                  result5 = parse_d();
                  if (result5 !== null) {
                    result6 = parse_f();
                    if (result6 !== null) {
                      result7 = parse_s();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_social_security_number() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_l();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 95) {
                      result6 = "_";
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_s();
                      if (result7 !== null) {
                        result8 = parse_e();
                        if (result8 !== null) {
                          result9 = parse_c();
                          if (result9 !== null) {
                            result10 = parse_u();
                            if (result10 !== null) {
                              result11 = parse_r();
                              if (result11 !== null) {
                                result12 = parse_i();
                                if (result12 !== null) {
                                  result13 = parse_t();
                                  if (result13 !== null) {
                                    result14 = parse_y();
                                    if (result14 !== null) {
                                      if (input.charCodeAt(pos) === 95) {
                                        result15 = "_";
                                        pos++;
                                      } else {
                                        result15 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"_\"");
                                        }
                                      }
                                      result15 = result15 !== null ? result15 : "";
                                      if (result15 !== null) {
                                        result16 = parse_n();
                                        if (result16 !== null) {
                                          result17 = parse_u();
                                          if (result17 !== null) {
                                            result18 = parse_m();
                                            if (result18 !== null) {
                                              result19 = parse_b();
                                              if (result19 !== null) {
                                                result20 = parse_e();
                                                if (result20 !== null) {
                                                  result21 = parse_r();
                                                  if (result21 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_ssn() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_s();
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_string() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_t();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_g();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_struct() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_s();
        if (result0 !== null) {
          result1 = parse_t();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_c();
                if (result4 !== null) {
                  result5 = parse_t();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_table() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_b();
            if (result2 !== null) {
              result3 = parse_l();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_telephone() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result4 = parse_p();
                if (result4 !== null) {
                  result5 = parse_h();
                  if (result5 !== null) {
                    result6 = parse_o();
                    if (result6 !== null) {
                      result7 = parse_n();
                      if (result7 !== null) {
                        result8 = parse_e();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_template() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_m();
            if (result2 !== null) {
              result3 = parse_p();
              if (result3 !== null) {
                result4 = parse_l();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_t();
                    if (result6 !== null) {
                      result7 = parse_e();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_text() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_x();
            if (result2 !== null) {
              result3 = parse_t();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_time() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_m();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_top() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_o();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_type() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_y();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result3 = parse_e();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_url() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_u();
        if (result0 !== null) {
          result1 = parse_r();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_username() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_u();
        if (result0 !== null) {
          result1 = parse_s();
          if (result1 !== null) {
            result2 = parse_e();
            if (result2 !== null) {
              result3 = parse_r();
              if (result3 !== null) {
                result4 = parse_n();
                if (result4 !== null) {
                  result5 = parse_a();
                  if (result5 !== null) {
                    result6 = parse_m();
                    if (result6 !== null) {
                      result7 = parse_e();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_uuid() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_u();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            result2 = parse_i();
            if (result2 !== null) {
              result3 = parse_d();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_value() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_v();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result3 = parse_u();
              if (result3 !== null) {
                result4 = parse_e();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_var() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_v();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_variable() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_v();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_b();
                  if (result5 !== null) {
                    result6 = parse_l();
                    if (result6 !== null) {
                      result7 = parse_e();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_variable_name() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_v();
        if (result0 !== null) {
          result1 = parse_a();
          if (result1 !== null) {
            result2 = parse_r();
            if (result2 !== null) {
              result3 = parse_i();
              if (result3 !== null) {
                result4 = parse_a();
                if (result4 !== null) {
                  result5 = parse_b();
                  if (result5 !== null) {
                    result6 = parse_l();
                    if (result6 !== null) {
                      result7 = parse_e();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos) === 95) {
                          result8 = "_";
                          pos++;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"_\"");
                          }
                        }
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = parse_n();
                          if (result9 !== null) {
                            result10 = parse_a();
                            if (result10 !== null) {
                              result11 = parse_m();
                              if (result11 !== null) {
                                result12 = parse_e();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_xml() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_x();
        if (result0 !== null) {
          result1 = parse_m();
          if (result1 !== null) {
            result2 = parse_l();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_zip() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_z();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_zipcode() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_z();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result2 = parse_p();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 95) {
                result3 = "_";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_c();
                if (result4 !== null) {
                  result5 = parse_o();
                  if (result5 !== null) {
                    result6 = parse_d();
                    if (result6 !== null) {
                      result7 = parse_e();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_file_path() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_wack();
          if (result1 !== null) {
            result2 = [];
            pos3 = pos;
            result3 = parse_value_dir();
            if (result3 !== null) {
              result4 = parse_wack();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos3 = pos;
              result3 = parse_value_dir();
              if (result3 !== null) {
                result4 = parse_wack();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
            }
            if (result2 !== null) {
              result3 = parse_value_dir();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_dir() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result1 = parse_wack();
        if (result1 === null) {
          result1 = parse_ws();
          if (result1 === null) {
            result1 = parse_quote_char();
          }
        }
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          if (input.length > pos) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos1;
          }
        } else {
          result1 = null;
          pos = pos1;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            pos2 = pos;
            reportFailures++;
            result1 = parse_wack();
            if (result1 === null) {
              result1 = parse_ws();
              if (result1 === null) {
                result1 = parse_quote_char();
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              if (input.length > pos) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_email_address() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_email();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e) { return e; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_email() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        pos3 = pos;
        reportFailures++;
        result1 = parse_quote_char();
        if (result1 === null) {
          result1 = parse_ws();
          if (result1 === null) {
            result1 = parse_at();
          }
        }
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = pos3;
        }
        if (result1 !== null) {
          result2 = parse_anychar();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result1 = parse_quote_char();
            if (result1 === null) {
              result1 = parse_ws();
              if (result1 === null) {
                result1 = parse_at();
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 !== null) {
              result2 = parse_anychar();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_at();
          if (result1 !== null) {
            result2 = parse_domain();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, at, d) { return plib.flatten(n) + at + d; })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_date_time() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_date();
        if (result0 !== null) {
          result1 = parse_space();
          if (result1 !== null) {
            result2 = parse_time();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return new Date(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_date() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_integer();
        if (result0 !== null) {
          result1 = parse_integer();
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result3 = parse_integer();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 45) {
                  result4 = "-";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_integer();
                  if (result5 !== null) {
                    result6 = parse_integer();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 45) {
                        result7 = "-";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"-\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_integer();
                        if (result8 !== null) {
                          result9 = parse_integer();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return new Date(plib.flatten(v) + ' 00:00:00'); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_time() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        if (/^[01]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[01]");
          }
        }
        if (result0 !== null) {
          result1 = parse_integer();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 50) {
            result0 = "2";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"2\"");
            }
          }
          if (result0 !== null) {
            if (/^[0123]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0123]");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            if (/^[0-5]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-5]");
              }
            }
            if (result2 !== null) {
              result3 = parse_integer();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result3 = ":";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result3 !== null) {
                pos2 = pos;
                if (/^[0-5]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-5]");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_integer();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = parse_period();
                  if (result5 !== null) {
                    result6 = parse_integer();
                    if (result6 !== null) {
                      result7 = parse_integer();
                      if (result7 !== null) {
                        result8 = parse_integer();
                        if (result8 !== null) {
                          result9 = parse_integer();
                          if (result9 !== null) {
                            result5 = [result5, result6, result7, result8, result9];
                          } else {
                            result5 = null;
                            pos = pos2;
                          }
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, hr, min, sec, mill) { return new Date(hr + min + sec + mill); })(pos0, result0[0], result0[2], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_boolean() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_boolean();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_boolean() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_y();
        if (result0 !== null) {
          result1 = parse_e();
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return true; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_t();
          if (result0 !== null) {
            result1 = parse_r();
            if (result1 !== null) {
              result2 = parse_u();
              if (result2 !== null) {
                result3 = parse_e();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) { return true; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.charCodeAt(pos) === 49) {
              result0 = "1";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"1\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) { return true; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              result0 = parse_n();
              if (result0 !== null) {
                result1 = parse_o();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset) { return false; })(pos0);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                result0 = parse_f();
                if (result0 !== null) {
                  result1 = parse_a();
                  if (result1 !== null) {
                    result2 = parse_l();
                    if (result2 !== null) {
                      result3 = parse_s();
                      if (result3 !== null) {
                        result4 = parse_e();
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset) { return false; })(pos0);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  if (input.charCodeAt(pos) === 48) {
                    result0 = "0";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"0\"");
                    }
                  }
                  if (result0 !== null) {
                    result0 = (function(offset) { return false; })(pos0);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_value_cfval() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_cfval();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cfval() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_pound();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_pound();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_anychar();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_pound();
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_anychar();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_pound();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_list() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          pos4 = pos;
          pos5 = pos;
          reportFailures++;
          result3 = parse_comma();
          if (result3 === null) {
            result3 = parse_quote_char();
          }
          reportFailures--;
          if (result3 === null) {
            result3 = "";
          } else {
            result3 = null;
            pos = pos5;
          }
          if (result3 !== null) {
            result4 = parse_anychar();
            if (result4 !== null) {
              result3 = [result3, result4];
            } else {
              result3 = null;
              pos = pos4;
            }
          } else {
            result3 = null;
            pos = pos4;
          }
          if (result3 !== null) {
            result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              pos4 = pos;
              pos5 = pos;
              reportFailures++;
              result3 = parse_comma();
              if (result3 === null) {
                result3 = parse_quote_char();
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos5;
              }
              if (result3 !== null) {
                result4 = parse_anychar();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos4;
                }
              } else {
                result3 = null;
                pos = pos4;
              }
            }
          } else {
            result2 = null;
          }
          if (result2 !== null) {
            result3 = parse_comma();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos3 = pos;
              pos4 = pos;
              pos5 = pos;
              reportFailures++;
              result3 = parse_comma();
              if (result3 === null) {
                result3 = parse_quote_char();
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos5;
              }
              if (result3 !== null) {
                result4 = parse_anychar();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos4;
                }
              } else {
                result3 = null;
                pos = pos4;
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  pos4 = pos;
                  pos5 = pos;
                  reportFailures++;
                  result3 = parse_comma();
                  if (result3 === null) {
                    result3 = parse_quote_char();
                  }
                  reportFailures--;
                  if (result3 === null) {
                    result3 = "";
                  } else {
                    result3 = null;
                    pos = pos5;
                  }
                  if (result3 !== null) {
                    result4 = parse_anychar();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos4;
                    }
                  } else {
                    result3 = null;
                    pos = pos4;
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result3 = parse_comma();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos3 = pos;
            pos4 = pos;
            reportFailures++;
            result3 = parse_comma();
            if (result3 === null) {
              result3 = parse_quote_char();
            }
            reportFailures--;
            if (result3 === null) {
              result3 = "";
            } else {
              result3 = null;
              pos = pos4;
            }
            if (result3 !== null) {
              result4 = parse_anychar();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos3 = pos;
                pos4 = pos;
                reportFailures++;
                result3 = parse_comma();
                if (result3 === null) {
                  result3 = parse_quote_char();
                }
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = pos4;
                }
                if (result3 !== null) {
                  result4 = parse_anychar();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                } else {
                  result3 = null;
                  pos = pos3;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v).split(','); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_domain() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_domain();
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return v; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_domain() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result2 = parse_dom_part();
        if (result2 !== null) {
          result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_dom_part();
          }
        } else {
          result1 = null;
        }
        if (result1 !== null) {
          result2 = parse_period();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            result2 = parse_dom_part();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_dom_part();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_period();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result2 = parse_dom_part();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_dom_part();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_dom_part() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result1 = parse_lcchars();
        if (result1 === null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 95) {
            result1 = "_";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_lcchars();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_lcchars();
            if (result1 === null) {
              pos1 = pos;
              if (input.charCodeAt(pos) === 95) {
                result1 = "_";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_lcchars();
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          if (input.charCodeAt(pos) === 45) {
            result2 = "-";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result2 !== null) {
            result3 = parse_lcchars();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          if (result2 === null) {
            result2 = parse_lcchars();
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            if (input.charCodeAt(pos) === 45) {
              result2 = "-";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_lcchars();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 === null) {
              result2 = parse_lcchars();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_any_non_whitespace() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = [];
          pos3 = pos;
          result4 = parse_chars();
          if (result4 !== null) {
            result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              result4 = parse_chars();
            }
          } else {
            result3 = null;
          }
          if (result3 !== null) {
            if (/^[\-_]/.test(input.charAt(pos))) {
              result4 = input.charAt(pos);
              pos++;
            } else {
              result4 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-_]");
              }
            }
            if (result4 !== null) {
              result3 = [result3, result4];
            } else {
              result3 = null;
              pos = pos3;
            }
          } else {
            result3 = null;
            pos = pos3;
          }
          while (result3 !== null) {
            result2.push(result3);
            pos3 = pos;
            result4 = parse_chars();
            if (result4 !== null) {
              result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_chars();
              }
            } else {
              result3 = null;
            }
            if (result3 !== null) {
              if (/^[\-_]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\-_]");
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
          }
          if (result2 !== null) {
            result3 = parse_chars();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = [];
            pos3 = pos;
            result4 = parse_chars();
            if (result4 !== null) {
              result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_chars();
              }
            } else {
              result3 = null;
            }
            if (result3 !== null) {
              if (/^[\-_]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\-_]");
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos3 = pos;
              result4 = parse_chars();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_chars();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (/^[\-_]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\-_]");
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
            }
            if (result2 !== null) {
              result3 = parse_chars();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_any() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result2 = parse_quote_char();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result3 = parse_anychar();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              reportFailures++;
              result2 = parse_quote_char();
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result3 = parse_anychar();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_str_any_non_quote() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result1 = parse_quote_char();
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result2 = parse_anychar();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos1;
          }
        } else {
          result1 = null;
          pos = pos1;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            pos2 = pos;
            reportFailures++;
            result1 = parse_quote_char();
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              result2 = parse_anychar();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return plib.flatten(v); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_empty_quote() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result1 = parse_quote_char();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ""; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value_integer() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_quote_char();
        if (result0 !== null) {
          result2 = parse_integer();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_integer();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_quote_char();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v) { return parseInt(plib.flatten(v)); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ops() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_e();
        if (result0 !== null) {
          result1 = parse_q();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_n();
          if (result0 !== null) {
            result1 = parse_e();
            if (result1 !== null) {
              result2 = parse_q();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_l();
            if (result0 !== null) {
              result1 = parse_t();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_l();
              if (result0 !== null) {
                result1 = parse_e();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                result0 = parse_g();
                if (result0 !== null) {
                  result1 = parse_t();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  result0 = parse_g();
                  if (result0 !== null) {
                    result1 = parse_e();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    result0 = parse_i();
                    if (result0 !== null) {
                      result1 = parse_s();
                      if (result1 !== null) {
                        result0 = [result0, result1];
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      result0 = parse_n();
                      if (result0 !== null) {
                        result1 = parse_o();
                        if (result1 !== null) {
                          result2 = parse_t();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = pos0;
                          }
                        } else {
                          result0 = null;
                          pos = pos0;
                        }
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_func_create_time_span() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_value_empty_quote();
        if (result0 !== null) {
          result0 = (function(offset) { return ""; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_create_time_span_func();
          if (result0 !== null) {
            result0 = (function(offset, v) { return v; })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_create_time_span_func() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_pound();
        if (result0 !== null) {
          if (input.substr(pos, 15) === "CreateTimeSpan(") {
            result1 = "CreateTimeSpan(";
            pos += 15;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"CreateTimeSpan(\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_integer();
              if (result3 !== null) {
                result5 = parse_space();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_space();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 44) {
                    result5 = ",";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_space();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_space();
                    }
                    if (result6 !== null) {
                      result7 = parse_integer();
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_space();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_space();
                        }
                        if (result8 !== null) {
                          if (input.charCodeAt(pos) === 44) {
                            result9 = ",";
                            pos++;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_space();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_space();
                            }
                            if (result10 !== null) {
                              result11 = parse_integer();
                              if (result11 !== null) {
                                result12 = [];
                                result13 = parse_space();
                                while (result13 !== null) {
                                  result12.push(result13);
                                  result13 = parse_space();
                                }
                                if (result12 !== null) {
                                  if (input.charCodeAt(pos) === 44) {
                                    result13 = ",";
                                    pos++;
                                  } else {
                                    result13 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\",\"");
                                    }
                                  }
                                  if (result13 !== null) {
                                    result14 = [];
                                    result15 = parse_space();
                                    while (result15 !== null) {
                                      result14.push(result15);
                                      result15 = parse_space();
                                    }
                                    if (result14 !== null) {
                                      result15 = parse_integer();
                                      if (result15 !== null) {
                                        result16 = [];
                                        result17 = parse_space();
                                        while (result17 !== null) {
                                          result16.push(result17);
                                          result17 = parse_space();
                                        }
                                        if (result16 !== null) {
                                          if (input.charCodeAt(pos) === 41) {
                                            result17 = ")";
                                            pos++;
                                          } else {
                                            result17 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result17 !== null) {
                                            result18 = parse_pound();
                                            if (result18 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, days, hours, minutes, seconds) {
        		calc = Date.now() +
        			( parseInt(days) * 86400000 ) + // days
        			( parseInt(hours) * 3600000 ) + // hours
        			( parseInt(minutes) * 60000 ) + // minutes
        			( parseInt(seconds) * 1000 );   // seconds
        		return { name: "create_time_span", value: new Date(calc) };
        	})(pos0, result0[3], result0[7], result0[11], result0[15]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_chars() {
        var result0;
        
        result0 = parse_ucchars();
        if (result0 === null) {
          result0 = parse_lcchars();
        }
        return result0;
      }
      
      function parse_ucchars() {
        var result0;
        
        if (/^[A-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        return result0;
      }
      
      function parse_lcchars() {
        var result0;
        
        if (/^[a-z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        return result0;
      }
      
      function parse_at() {
        var result0;
        
        if (input.charCodeAt(pos) === 64) {
          result0 = "@";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        return result0;
      }
      
      function parse_pound() {
        var result0;
        
        if (input.charCodeAt(pos) === 35) {
          result0 = "#";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        return result0;
      }
      
      function parse_ws() {
        var result0;
        
        result0 = parse_space();
        if (result0 === null) {
          if (input.charCodeAt(pos) === 9) {
            result0 = "\t";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\t\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 10) {
              result0 = "\n";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\n\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_gt() {
        var result0;
        
        if (input.charCodeAt(pos) === 60) {
          result0 = "<";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        return result0;
      }
      
      function parse_lt() {
        var result0;
        
        if (input.charCodeAt(pos) === 62) {
          result0 = ">";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\">\"");
          }
        }
        return result0;
      }
      
      function parse_wack() {
        var result0;
        
        if (input.charCodeAt(pos) === 47) {
          result0 = "/";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        return result0;
      }
      
      function parse_eql() {
        var result0;
        
        if (input.charCodeAt(pos) === 61) {
          result0 = "=";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        return result0;
      }
      
      function parse_period() {
        var result0;
        
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        return result0;
      }
      
      function parse_comma() {
        var result0;
        
        if (input.charCodeAt(pos) === 44) {
          result0 = ",";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        return result0;
      }
      
      function parse_quote_char() {
        var result0;
        
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 39) {
            result0 = "'";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
        }
        return result0;
      }
      
      function parse_integer() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return result0;
      }
      
      function parse_anychar() {
        var result0;
        
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return result0;
      }
      
      function parse_attrib_eql() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_ws();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ws();
        }
        if (result0 !== null) {
          result1 = parse_eql();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ws();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ws();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_a() {
        var result0;
        
        if (/^[aA]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[aA]");
          }
        }
        return result0;
      }
      
      function parse_b() {
        var result0;
        
        if (/^[bB]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[bB]");
          }
        }
        return result0;
      }
      
      function parse_c() {
        var result0;
        
        if (/^[cC]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[cC]");
          }
        }
        return result0;
      }
      
      function parse_d() {
        var result0;
        
        if (/^[dD]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[dD]");
          }
        }
        return result0;
      }
      
      function parse_e() {
        var result0;
        
        if (/^[eE]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[eE]");
          }
        }
        return result0;
      }
      
      function parse_f() {
        var result0;
        
        if (/^[fF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[fF]");
          }
        }
        return result0;
      }
      
      function parse_g() {
        var result0;
        
        if (/^[gG]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[gG]");
          }
        }
        return result0;
      }
      
      function parse_h() {
        var result0;
        
        if (/^[hH]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[hH]");
          }
        }
        return result0;
      }
      
      function parse_i() {
        var result0;
        
        if (/^[iI]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[iI]");
          }
        }
        return result0;
      }
      
      function parse_j() {
        var result0;
        
        if (/^[jJ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[jJ]");
          }
        }
        return result0;
      }
      
      function parse_k() {
        var result0;
        
        if (/^[kK]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[kK]");
          }
        }
        return result0;
      }
      
      function parse_l() {
        var result0;
        
        if (/^[lL]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[lL]");
          }
        }
        return result0;
      }
      
      function parse_m() {
        var result0;
        
        if (/^[mM]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[mM]");
          }
        }
        return result0;
      }
      
      function parse_n() {
        var result0;
        
        if (/^[nN]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[nN]");
          }
        }
        return result0;
      }
      
      function parse_o() {
        var result0;
        
        if (/^[oO]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[oO]");
          }
        }
        return result0;
      }
      
      function parse_p() {
        var result0;
        
        if (/^[pP]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[pP]");
          }
        }
        return result0;
      }
      
      function parse_q() {
        var result0;
        
        if (/^[qQ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[qQ]");
          }
        }
        return result0;
      }
      
      function parse_r() {
        var result0;
        
        if (/^[rR]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[rR]");
          }
        }
        return result0;
      }
      
      function parse_s() {
        var result0;
        
        if (/^[sS]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[sS]");
          }
        }
        return result0;
      }
      
      function parse_t() {
        var result0;
        
        if (/^[tT]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[tT]");
          }
        }
        return result0;
      }
      
      function parse_u() {
        var result0;
        
        if (/^[uU]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[uU]");
          }
        }
        return result0;
      }
      
      function parse_v() {
        var result0;
        
        if (/^[vV]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[vV]");
          }
        }
        return result0;
      }
      
      function parse_w() {
        var result0;
        
        if (/^[wW]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[wW]");
          }
        }
        return result0;
      }
      
      function parse_x() {
        var result0;
        
        if (/^[xX]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[xX]");
          }
        }
        return result0;
      }
      
      function parse_y() {
        var result0;
        
        if (/^[yY]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[yY]");
          }
        }
        return result0;
      }
      
      function parse_z() {
        var result0;
        
        if (/^[zZ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[zZ]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      	var util = require('util'),
      		plib = require('./lib/parselib'),
      		cftaglib = require('./lib/cftag'),
      		cftag = cftaglib.cftag,
      		human_date = require('date.js'),
      		inspect = console.dir;
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
